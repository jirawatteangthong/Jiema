import ccxt
import os
import time
import math

# ------------------------------------------------------------------------------
# üîê Load API Credentials from Environment
# ------------------------------------------------------------------------------
API_KEY = os.getenv("RAILWAY_API_KEY")
SECRET = os.getenv("RAILWAY_SECRET")
PASSWORD = os.getenv("RAILWAY_PASSWORD")

if not all([API_KEY, SECRET, PASSWORD]):
    print("Error: Please set RAILWAY_API_KEY, RAILWAY_SECRET, and RAILWAY_PASSWORD environment variables.")
    exit()

# ------------------------------------------------------------------------------
# ‚öôÔ∏è Config Settings
# ------------------------------------------------------------------------------
SYMBOL = 'ETH/USDT'
TP_DISTANCE = 30
SL_DISTANCE = 50
LEVERAGE = 30
MARGIN_BUFFER = 5 # ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ 5 USDT ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î Notional Value ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
# ‚úÖ ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Notional Value ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà OKX ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö
# ‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà 43.5 USDT (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏≤‡∏Å slider 1%)
TARGET_NOTIONAL_USDT = 43.5 # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Notional Value ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î
# FORCED_AMOUNT_PRECISION: ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏´‡πâ CCXT ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ precision ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (amount_to_precision)
# ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î Notional Value ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

# ------------------------------------------------------------------------------
# üîå Connect to OKX Exchange (Futures, Cross Margin)
# ------------------------------------------------------------------------------
def connect_exchange():
    return ccxt.okx({
        'apiKey': API_KEY,
        'secret': SECRET,
        'password': PASSWORD,
        'enableRateLimit': True,
        'options': {
            'defaultType': 'swap',
            'defaultMarket': 'linear',
            'marginMode': 'cross',
        },
        'urls': {
            'api': {
                'public': 'https://www.okx.com/api/v5/public',
                'private': 'https://www.okx.com/api/v5/private',
            }
        }
    })

exchange = connect_exchange()
try:
    exchange.load_markets()
    print("‚úÖ OKX markets loaded successfully.")
except Exception as e:
    print(f"‚ùå Failed to load OKX markets: {e}")
    print("Please check your API keys, network connection, or OKX status.")
    exit()

# ------------------------------------------------------------------------------
# üî¢ Calculate number of contracts based on TARGET_NOTIONAL_USDT
# ------------------------------------------------------------------------------
# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Amount ‡πÅ‡∏•‡∏∞ Margin ‡∏à‡∏≤‡∏Å Notional Value ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
def calculate_amount_from_notional(available_usdt: float, price: float, leverage: int, target_notional: float) -> tuple[float, float]:
    if price <= 0 or leverage <= 0 or target_notional <= 0:
        print("Error: Price, leverage, and target_notional must be positive.")
        return (0, 0)

    market_info = exchange.market(SYMBOL)
    if not market_info:
        print(f"‚ùå Could not fetch market info for {SYMBOL} in calculate_amount_from_notional.")
        return (0, 0)

    # 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì contracts ‡∏à‡∏≤‡∏Å target_notional
    contracts_raw = target_notional / price

    # 2. ‡πÉ‡∏ä‡πâ exchange.amount_to_precision ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° Exchange
    # CCXT ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÉ‡∏ä‡πâ precision.amount ‡∏´‡∏£‡∏∑‡∏≠ amount.step ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å market_info
    contracts_to_open = exchange.amount_to_precision(SYMBOL, contracts_raw)
    contracts_to_open = float(contracts_to_open) # Ensure it's float

    # 3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Margin ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏à‡∏≤‡∏Å contracts_to_open ‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÅ‡∏•‡πâ‡∏ß
    actual_notional_after_precision = contracts_to_open * price
    required_margin = actual_notional_after_precision / leverage

    # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Margin ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if available_usdt < required_margin + MARGIN_BUFFER:
        print(f"‚ùå Margin not sufficient for target Notional. Available: {available_usdt:.2f}, Required: {required_margin:.2f} (Est Cost) + {MARGIN_BUFFER} (Buffer) = {required_margin + MARGIN_BUFFER:.2f} USDT.")
        return (0, 0)

    # 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Ç‡∏≠‡∏á amount ‡∏ó‡∏µ‡πà Exchange ‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    min_exchange_amount = market_info['limits']['amount']['min'] if 'amount' in market_info['limits'] and 'min' in market_info['limits']['amount'] and market_info['limits']['amount']['min'] is not None else 0
    if contracts_to_open < min_exchange_amount:
        print(f"‚ùå Calculated amount {contracts_to_open:.4f} is less than exchange's minimum amount {min_exchange_amount:.4f}. Cannot open.")
        return (0, 0)
        
    print(f"üí° DEBUG (calculate_amount_from_notional): Target Notional: {target_notional:.2f}")
    print(f"üí° DEBUG (calculate_amount_from_notional): Raw contracts: {contracts_raw:.4f}")
    print(f"üí° DEBUG (calculate_amount_from_notional): Contracts after precision: {contracts_to_open:.4f}")
    print(f"üí° DEBUG (calculate_amount_from_notional): Actual Notional after precision: {actual_notional_after_precision:.2f}")
    print(f"üí° DEBUG (calculate_amount_from_notional): Required Margin: {required_margin:.2f} USDT")

    return (contracts_to_open, required_margin)


# ------------------------------------------------------------------------------
# üîç Check if a Short position already exists
# ------------------------------------------------------------------------------
def get_open_position():
    try:
        positions = exchange.fetch_positions([SYMBOL])
        for pos in positions:
            if pos['symbol'] == SYMBOL and pos['contracts'] > 0 and pos['side'] == 'short':
                return pos
        return None
    except ccxt.NetworkError as e:
        print(f"Network error fetching positions: {e}")
        return None
    except ccxt.ExchangeError as e:
        print(f"Exchange error fetching positions: {e}")
        return None
    except Exception as e:
        print(f"An unexpected error occurred while fetching positions: {e}")
        return None

# ------------------------------------------------------------------------------
# üìâ Open Short Market Order + Set TP then SL
# ------------------------------------------------------------------------------
def open_short_order():
    try:
        ticker = exchange.fetch_ticker(SYMBOL)
        current_price = ticker['last']
        print(f"\nüìä Current Price of {SYMBOL}: {current_price:.2f} USDT")

        balance = exchange.fetch_balance({'type': 'swap'})
        available_usdt = float(balance.get('total', {}).get('USDT', 0))
        print(f"üí∞ Available Margin (OKX): {available_usdt:.2f} USDT")

        existing_position = get_open_position()
        if existing_position:
            print(f"‚ö†Ô∏è An open short position already exists for {SYMBOL} (size: {existing_position['contracts']}). Skipping new order.")
            return

        # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î Notional Value ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        order_amount, estimated_used_margin = calculate_amount_from_notional(
            available_usdt, current_price, LEVERAGE, TARGET_NOTIONAL_USDT
        )

        if float(order_amount) == 0:
            print("‚ùå Cannot open order as calculated amount is zero or insufficient after all checks.")
            return

        print(f"üìà Estimated Margin for Order (Recalculated): {estimated_used_margin:.2f} USDT")
        # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß)
        # ‡πÉ‡∏´‡πâ CCXT amount_to_precision ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á
        print(f"üî¢ Opening quantity: {order_amount} contracts") 

        tp_price = round(current_price - TP_DISTANCE, 1)
        sl_price = round(current_price + SL_DISTANCE, 1)
        print(f"üéØ Calculated TP: {tp_price} | üõë Calculated SL: {sl_price}")

        # --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏õ‡∏¥‡∏î Market Short Order ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ TP/SL ---
        print(f"‚è≥ Placing market SELL order for {order_amount} contracts of {SYMBOL}...")
        order = exchange.create_market_sell_order(
            symbol=SYMBOL,
            amount=float(order_amount),
            params={
                "tdMode": "cross",
                "reduceOnly": False,
            }
        )
        print(f"‚úÖ Market SELL order placed: ID ‚Üí {order['id']}")
        time.sleep(2) # ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

        # --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏±‡πâ‡∏á TP Order (Limit Order) ---
        print(f"‚è≥ Setting Take Profit order at {tp_price}...")
        try:
            tp_order = exchange.create_order(
                symbol=SYMBOL,
                type='limit',
                side='buy',
                amount=float(order_amount),
                price=tp_price,
                params={
                    "tdMode": "cross",
                    "posSide": "short",
                    "reduceOnly": True,
                }
            )
            print(f"‚úÖ Take Profit order placed: ID ‚Üí {tp_order['id']}")
        except ccxt.BaseError as e:
            print(f"‚ùå Failed to set Take Profit order: {str(e)}")

        # --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ï‡∏±‡πâ‡∏á SL Order (Stop Market Order) ---
        print(f"‚è≥ Setting Stop Loss order at {sl_price}...")
        try:
            sl_order = exchange.create_order(
                symbol=SYMBOL,
                type='stop_market',
                side='buy',
                amount=float(order_amount),
                price=None,
                params={
                    "tdMode": "cross",
                    "posSide": "short",
                    "reduceOnly": True,
                    "triggerPx": str(sl_price),
                    "ordPx": "-1"
                }
            )
            print(f"‚úÖ Stop Loss order placed: ID ‚Üí {sl_order['id']}")
        except ccxt.BaseError as e:
            print(f"‚ùå Failed to set Stop Loss order: {str(e)}")

    except ccxt.NetworkError as e:
        print(f"‚ùå Network error during order placement: {e}")
    except ccxt.ExchangeError as e:
        print(f"‚ùå Exchange error during order placement: {e}")
        print(f"Error details: {e}")
    except Exception as e:
        print(f"‚ùå An unexpected error occurred: {e}")

# ------------------------------------------------------------------------------
# üöÄ Start Bot
# ------------------------------------------------------------------------------
if __name__ == "__main__":
    print("\nüöÄ Starting the trading bot...\n")
    open_short_order()
