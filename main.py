import ccxt
import time
import requests
from datetime import datetime, timedelta
import logging
import threading
import json
import os
# === ‡πÄ‡∏û‡∏¥‡πà‡∏° Library ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô Telegram ===
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext

# ==============================================================================
# 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (CONFIGURATION) - (‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
# ==============================================================================

# --- API Keys & Credentials ---
API_KEY = os.getenv('RAILWAY_API_KEY', 'YOUR_API_KEY_HERE_FOR_LOCAL_TESTING')
SECRET = os.getenv('RAILWAY_SECRET', 'YOUR_SECRET_HERE_FOR_LOCAL_TESTING')
PASSWORD = os.getenv('RAILWAY_PASSWORD', 'YOUR_PASSWORD_HERE_FOR_LOCAL_TESTING')

# --- Trade Parameters ---
SYMBOL = 'BTC/USDT:USDT'
TIMEFRAME = '15m'
LEVERAGE = 30
TP_VALUE_POINTS = 501
SL_VALUE_POINTS = 999
BE_PROFIT_TRIGGER_POINTS = 350
BE_SL_BUFFER_POINTS = 100
PORTFOLIO_PERCENT_TRADE = 0.8
CROSS_THRESHOLD_POINTS = 35

# --- Telegram Notification Settings ---
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', 'YOUR_TELEGRAM_TOKEN_HERE_FOR_LOCAL_TESTING')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', 'YOUR_CHAT_ID_HERE_FOR_LOCAL_TESTING')

# --- Files & Paths ---
STATS_FILE = 'trading_stats.json'

# --- Bot Timing ---
# ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /stop ‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
MAIN_LOOP_SLEEP_SECONDS = 60
ERROR_RETRY_SLEEP_SECONDS = 60

# --- Tolerance ---
TP_SL_BE_PRICE_TOLERANCE_PERCENT = 0.005

# ==============================================================================
# 2. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
# ==============================================================================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ==============================================================================
# 3. ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î (GLOBAL TRADE STATE VARIABLES)
# ==============================================================================

# === ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ===
trading_active = threading.Event() # ‡πÉ‡∏ä‡πâ Event ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
trading_thread = None              # ‡πÄ‡∏Å‡πá‡∏ö thread ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î

current_position = None
entry_price = None
sl_moved = False
portfolio_balance = 0.0
initial_balance = 0.0
current_position_size = 0.0

# ==============================================================================
# 4. ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ (STATISTICS DATA STRUCTURE) (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
# ==============================================================================
daily_stats = {
    'date': None,
    'tp_count': 0,
    'sl_count': 0,
    'total_pnl': 0.0,
    'trades': [],
    'last_report_date': None,
    'last_ema_cross_signal': None
}

# ==============================================================================
# 5. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Exchange (CCXT EXCHANGE SETUP) (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
# ==============================================================================
try:
    if not API_KEY or API_KEY == 'YOUR_API_KEY_HERE_FOR_LOCAL_TESTING' or \
       not SECRET or SECRET == 'YOUR_SECRET_HERE_FOR_LOCAL_TESTING' or \
       not PASSWORD or PASSWORD == 'YOUR_PASSWORD_HERE_FOR_LOCAL_TESTING':
        raise ValueError("API_KEY, SECRET, ‡∏´‡∏£‡∏∑‡∏≠ PASSWORD ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Environment Variables.")

    exchange = ccxt.okx({
        'apiKey': API_KEY,
        'secret': SECRET,
        'password': PASSWORD,
        'enableRateLimit': True,
        'rateLimit': 1000,
        'options': {'defaultType': 'swap'}
    })
    exchange.set_sandbox_mode(False)
    logger.info("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö OKX Exchange ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
except ValueError as ve:
    logger.critical(f"‚ùå Configuration Error: {ve}")
    exit()
except Exception as e:
    logger.critical(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö OKX Exchange ‡πÑ‡∏î‡πâ: {e}")
    exit()

# ==============================================================================
# 6. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ (STATISTICS MANAGEMENT FUNCTIONS) (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
# ==============================================================================
def save_daily_stats():
    try:
        with open(STATS_FILE, 'w') as f:
            json.dump(daily_stats, f, indent=4)
        logger.debug(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå {STATS_FILE} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: {e}")

def load_daily_stats():
    global daily_stats
    try:
        if os.path.exists(STATS_FILE):
            with open(STATS_FILE, 'r') as f:
                daily_stats = json.load(f)
            logger.info(f"üíæ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå {STATS_FILE} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            current_date_str = datetime.now().strftime('%Y-%m-%d')
            if daily_stats.get('date') != current_date_str:
                logger.info(f"‚ÑπÔ∏è ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà")
                reset_daily_stats()
        else:
            logger.info(f"üÜï ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà")
            reset_daily_stats()
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: {e}")
        reset_daily_stats()

def reset_daily_stats():
    global daily_stats
    current_date_str = datetime.now().strftime('%Y-%m-%d')
    # ‡πÄ‡∏Å‡πá‡∏ö signal ‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏ß‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    last_signal = daily_stats.get('last_ema_cross_signal')
    daily_stats = {
        'date': current_date_str, 'tp_count': 0, 'sl_count': 0, 'total_pnl': 0.0,
        'trades': [], 'last_report_date': daily_stats.get('last_report_date'),
        'last_ema_cross_signal': last_signal
    }
    save_daily_stats()
    logger.info(f"üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {current_date_str}")

def add_trade_result(reason: str, pnl: float):
    global daily_stats
    current_date_str = datetime.now().strftime('%Y-%m-%d')
    if daily_stats.get('date') != current_date_str:
        reset_daily_stats()

    if reason.upper() == 'TP':
        daily_stats['tp_count'] += 1
    elif reason.upper() in ['SL', 'SL (‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô)']:
        daily_stats['sl_count'] += 1
    daily_stats['total_pnl'] += pnl
    daily_stats['trades'].append({
        'time': datetime.now().strftime('%H:%M:%S'), 'reason': reason, 'pnl': pnl
    })
    save_daily_stats()

# ==============================================================================
# 7. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Telegram (TELEGRAM NOTIFICATION FUNCTIONS) (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
# ==============================================================================
def send_telegram(msg: str):
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        logger.warning("‚ö†Ô∏è TELEGRAM_TOKEN/CHAT_ID ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ")
        return
    try:
        url = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage'
        params = {'chat_id': TELEGRAM_CHAT_ID, 'text': msg, 'parse_mode': 'HTML'}
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        logger.info(f"‚úâÔ∏è Telegram: {msg.splitlines()[0]}...")
    except Exception as e:
        logger.error(f"‚õîÔ∏è Error sending Telegram message: {e}")

# ==============================================================================
# 8. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Exchange (EXCHANGE DATA RETRIEVAL FUNCTIONS) (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
# ==============================================================================
def get_portfolio_balance() -> float:
    global portfolio_balance
    try:
        balance_data = exchange.fetch_balance({'type': 'trading'})
        usdt_balance = float(balance_data.get('USDT', {}).get('total', 0.0))
        portfolio_balance = usdt_balance
        return usdt_balance
    except Exception as e:
        logger.error(f"‚ùå Error fetching balance: {e}")
        return 0.0

def get_current_position() -> dict | None:
    try:
        positions = exchange.fetch_positions([SYMBOL])
        for pos in positions:
            if float(pos.get('info', {}).get('posAmt', 0)) != 0:
                pos_amount = float(pos['info']['posAmt'])
                return {
                    'side': 'long' if pos_amount > 0 else 'short', 'size': abs(pos_amount),
                    'entry_price': float(pos['entryPrice']), 'unrealized_pnl': float(pos['unrealizedPnl']),
                    'pos_id': pos['id']
                }
        return None
    except Exception as e:
        logger.error(f"‚ùå Error fetching positions: {e}")
        return None

# ==============================================================================
# 9. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Indicators (INDICATOR CALCULATION FUNCTIONS) (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
# ==============================================================================
def calculate_ema(prices: list[float], period: int) -> float | None:
    if len(prices) < period: return None
    sma = sum(prices[:period]) / period
    ema = sma
    multiplier = 2 / (period + 1)
    for price in prices[period:]:
        ema = (price * multiplier) + (ema * (1 - multiplier))
    return ema

def check_ema_cross() -> str | None:
    try:
        ohlcv = exchange.fetch_ohlcv(SYMBOL, TIMEFRAME, limit=250)
        if len(ohlcv) < 202:
            logger.warning(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OHLCV ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ({len(ohlcv)}/202)")
            return None
        closes = [c[4] for c in ohlcv]
        ema50_current = calculate_ema(closes, 50)
        ema200_current = calculate_ema(closes, 200)
        ema50_prev = calculate_ema(closes[:-1], 50)
        ema200_prev = calculate_ema(closes[:-1], 200)
        if None in [ema50_prev, ema200_prev, ema50_current, ema200_current]: return None

        if ema50_prev <= ema200_prev and ema50_current > (ema200_current + CROSS_THRESHOLD_POINTS):
            logger.info(f"üöÄ Threshold Golden Cross: EMA50({ema50_current:.2f}) > EMA200({ema200_current:.2f}) + {CROSS_THRESHOLD_POINTS}")
            return 'long'
        elif ema50_prev >= ema200_prev and ema50_current < (ema200_current - CROSS_THRESHOLD_POINTS):
            logger.info(f"üîª Threshold Death Cross: EMA50({ema50_current:.2f}) < EMA200({ema200_current:.2f}) - {CROSS_THRESHOLD_POINTS}")
            return 'short'
        return None
    except Exception as e:
        logger.error(f"‚ùå Error in check_ema_cross: {e}")
        return None

# ==============================================================================
# 10. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢ (ORDER MANAGEMENT FUNCTIONS) (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
# ==============================================================================
def open_market_order(direction: str, current_price: float) -> tuple[bool, float | None]:
    global current_position_size
    try:
        balance = get_portfolio_balance()
        if balance <= 1:
            send_telegram(f"‚õîÔ∏è Error: ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ({balance:.2f} USDT).")
            return False, None
        use_balance = balance * PORTFOLIO_PERCENT_TRADE
        market = exchange.market(SYMBOL)
        order_size_in_btc = (use_balance * LEVERAGE) / current_price
        min_amount = market.get('limits', {}).get('amount', {}).get('min', 0)
        if min_amount and order_size_in_btc < min_amount:
            logger.warning(f"‚ö†Ô∏è ‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ({order_size_in_btc:.6f}) ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ ({min_amount:.6f}). ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥.")
            order_size_in_btc = min_amount
        order_size_in_btc = float(exchange.amount_to_precision(SYMBOL, order_size_in_btc))
        if order_size_in_btc <= 0:
            send_telegram("‚õîÔ∏è Error: ‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô 0.")
            return False, None
        side = 'buy' if direction == 'long' else 'sell'
        params = {'tdMode': 'cross', 'mgnCcy': 'USDT'}
        logger.info(f"‚ö°Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î Market Order ({direction.upper()}, Size: {order_size_in_btc:.6f} BTC)...")
        order = exchange.create_order(SYMBOL, 'market', side, order_size_in_btc, params=params)
        logger.info(f"‚úÖ Market Order ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {order.get('id', 'N/A')}")
        time.sleep(5) # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏≤‡∏Å‡∏è
        confirmed_pos_info = get_current_position()
        if confirmed_pos_info and confirmed_pos_info['side'] == direction:
            logger.info(f"‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô Entry Price: {confirmed_pos_info['entry_price']:.2f}")
            current_position_size = confirmed_pos_info['size']
            return True, confirmed_pos_info['entry_price']
        else:
            logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå.")
            send_telegram("‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ.")
            return False, None
    except Exception as e:
        send_telegram(f"‚ùå Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
        logger.error(f"‚ùå Market order failed: {e}", exc_info=True)
        return False, None

def set_tpsl_for_position(pos_direction: str, entry_price_val: float) -> bool:
    try:
        tp_price = entry_price_val + TP_VALUE_POINTS if pos_direction == 'long' else entry_price_val - TP_VALUE_POINTS
        sl_price = entry_price_val - SL_VALUE_POINTS if pos_direction == 'long' else entry_price_val + SL_VALUE_POINTS
        tp_price = float(exchange.price_to_precision(SYMBOL, tp_price))
        sl_price = float(exchange.price_to_precision(SYMBOL, sl_price))
        params = {
            'instId': exchange.market(SYMBOL)['id'], 'posSide': 'net', 'mgnMode': 'cross',
            'tpTriggerPx': str(tp_price), 'tpOrdPx': '-1',
            'slTriggerPx': str(sl_price), 'slOrdPx': '-1',
        }
        logger.info(f"‚öôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TP/SL ({pos_direction.upper()}) SL:{sl_price:,.1f} TP:{tp_price:,.1f}...")
        response = exchange.private_post_trade_order_tpsl(params)
        if response and response.get('code') == '0':
            logger.info("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TP/SL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à.")
            message = f"""{('üìà' if pos_direction == 'long' else 'üìâ')} ‚úÖ <b>‡πÄ‡∏õ‡∏¥‡∏î {pos_direction.upper()} & ‡∏ï‡∏±‡πâ‡∏á TP/SL</b>
<b>Entry:</b> <code>{entry_price_val:,.1f}</code>
<b>TP:</b> <code>{tp_price:,.1f}</code>
<b>SL:</b> <code>{sl_price:,.1f}</code>"""
            send_telegram(message)
            return True
        else:
            error_detail = response.get('msg', 'No message')
            logger.error(f"‚ùå ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TP/SL ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {error_detail}")
            send_telegram(f"‚õîÔ∏è Error: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TP/SL ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {error_detail}")
            return False
    except Exception as e:
        logger.error(f"‚ùå Error in set_tpsl_for_position: {e}", exc_info=True)
        send_telegram(f"‚õîÔ∏è Error: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á TP/SL\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
        return False

def move_sl_to_breakeven(pos_direction: str, entry_price_val: float):
    global sl_moved
    if sl_moved: return
    try:
        new_sl_price = entry_price_val + BE_SL_BUFFER_POINTS if pos_direction == 'long' else entry_price_val - BE_SL_BUFFER_POINTS
        new_sl_price = float(exchange.price_to_precision(SYMBOL, new_sl_price))
        params = {
            'instId': exchange.market(SYMBOL)['id'], 'posSide': 'net', 'mgnMode': 'cross',
            'slTriggerPx': str(new_sl_price), 'slOrdPx': '-1',
        }
        logger.info(f"‚öôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô SL ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô: {new_sl_price:,.1f}...")
        response = exchange.private_post_trade_order_tpsl(params)
        if response and response.get('code') == '0':
            sl_moved = True
            message = f"""üîÑ <b>‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô SL ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ (Break-even)</b>
<b>üìç Entry:</b> <code>{entry_price_val:,.1f}</code>
<b>üõ°Ô∏è SL ‡πÉ‡∏´‡∏°‡πà:</b> <code>{new_sl_price:,.1f}</code>"""
            send_telegram(message)
            logger.info(f"‚úÖ SL ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à.")
        else:
            logger.warning(f"‚ö†Ô∏è ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô SL ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {response.get('msg', 'No message')}")
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô SL: {e}", exc_info=True)

# ==============================================================================
# 11. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (MONITORING FUNCTIONS) (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
# ==============================================================================
def monitor_position(pos_info: dict | None, current_price: float):
    global current_position, sl_moved, entry_price, current_position_size, daily_stats
    if not pos_info:
        if current_position:
            logger.info(f"‚ÑπÔ∏è ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô {current_position.upper()} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß.")
            pnl_usdt_actual = 0.0
            if entry_price and current_position_size:
                pnl_usdt_actual = (current_price - entry_price) * current_position_size if current_position == 'long' else (entry_price - current_price) * current_position_size
            
            # Logic to determine close reason
            close_reason = "‡∏õ‡∏¥‡∏î‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"; emoji = "‚ùì"
            tp_sl_be_tolerance = entry_price * TP_SL_BE_PRICE_TOLERANCE_PERCENT if entry_price else 0
            
            if current_position == 'long' and entry_price:
                if current_price >= (entry_price + TP_VALUE_POINTS - tp_sl_be_tolerance): close_reason, emoji = "TP", "‚úÖ"
                elif sl_moved and abs(current_price - (entry_price + BE_SL_BUFFER_POINTS)) <= tp_sl_be_tolerance: close_reason, emoji = "SL (‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô)", "üõ°Ô∏è"
                elif current_price <= (entry_price - SL_VALUE_POINTS + tp_sl_be_tolerance): close_reason, emoji = "SL", "‚ùå"
            elif current_position == 'short' and entry_price:
                if current_price <= (entry_price - TP_VALUE_POINTS + tp_sl_be_tolerance): close_reason, emoji = "TP", "‚úÖ"
                elif sl_moved and abs(current_price - (entry_price - BE_SL_BUFFER_POINTS)) <= tp_sl_be_tolerance: close_reason, emoji = "SL (‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô)", "üõ°Ô∏è"
                elif current_price >= (entry_price + SL_VALUE_POINTS - tp_sl_be_tolerance): close_reason, emoji = "SL", "‚ùå"

            send_telegram(f"{emoji} <b>‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏î‡πâ‡∏ß‡∏¢ {close_reason}</b>\n<b>PnL (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì):</b> <code>{pnl_usdt_actual:,.2f} USDT</code>")
            add_trade_result(close_reason, pnl_usdt_actual)
            current_position, entry_price, current_position_size, sl_moved = None, None, 0.0, False
            daily_stats['last_ema_cross_signal'] = None # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
            save_daily_stats()
        return

    current_position, entry_price, current_position_size = pos_info['side'], pos_info['entry_price'], pos_info['size']
    logger.info(f"üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {current_position.upper()}, PnL: {pos_info['unrealized_pnl']:,.2f} USDT, ‡∏£‡∏≤‡∏Ñ‡∏≤: {current_price:,.1f}, ‡πÄ‡∏Ç‡πâ‡∏≤: {entry_price:,.1f}")
    
    pnl_in_points = (current_price - entry_price) if current_position == 'long' else (entry_price - current_price)
    if not sl_moved and pnl_in_points >= BE_PROFIT_TRIGGER_POINTS:
        move_sl_to_breakeven(current_position, entry_price)

# ==============================================================================
# 12. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏´‡∏•‡∏±‡∏Å (MAIN TRADING LOGIC)
# ==============================================================================
def trading_logic_loop():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô Logic ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Thread ‡πÅ‡∏¢‡∏Å)."""
    logger.info("üöÄ Trading thread started. Waiting for signal...")
    while trading_active.is_set():
        try:
            current_pos_info = get_current_position()
            time.sleep(1) # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            if not current_pos_info:
                signal = check_ema_cross()
                if signal and signal != daily_stats.get('last_ema_cross_signal'):
                    logger.info(f"‚ú® ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì {signal.upper()} ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå.")
                    ticker = exchange.fetch_ticker(SYMBOL)
                    market_order_success, confirmed_entry_price = open_market_order(signal, ticker['last'])
                    if market_order_success and confirmed_entry_price:
                        set_tpsl_success = set_tpsl_for_position(signal, confirmed_entry_price)
                        if set_tpsl_success:
                            daily_stats['last_ema_cross_signal'] = signal
                            save_daily_stats()
                        else:
                            send_telegram("‚õîÔ∏è <b>‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á:</b> ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏ï‡∏±‡πâ‡∏á TP/SL ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            else: # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                ticker = exchange.fetch_ticker(SYMBOL)
                monitor_position(current_pos_info, ticker['last'])
            
            time.sleep(MAIN_LOOP_SLEEP_SECONDS)
        except Exception as e:
            logger.error(f"‚õîÔ∏è Error in trading loop: {e}", exc_info=True)
            time.sleep(ERROR_RETRY_SLEEP_SECONDS)
    logger.info("üõë Trading thread has been stopped.")

# ==============================================================================
# 13. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á TELEGRAM (TELEGRAM COMMAND HANDLERS)
# ==============================================================================
def get_summary_text() -> str:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥."""
    try:
        current_date_str = datetime.now().strftime('%Y-%m-%d')
        if daily_stats.get('date') != current_date_str:
            reset_daily_stats()
        
        balance = get_portfolio_balance()
        pnl_from_start = balance - initial_balance if initial_balance > 0 else 0.0
        
        status_text = "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà ‚úÖ" if trading_active.is_set() else "‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà üõë"
        
        summary = f"""üìä <b>‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• ‡∏ì ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {datetime.now().strftime('%d/%m/%Y %H:%M')}</b>
<b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏≠‡∏ó:</b> <b>{status_text}</b>
<b>‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏£‡∏î:</b> <code>{SYMBOL}</code> | <b>TF:</b> <code>{TIMEFRAME}</code>

<b>--- ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ---</b>
<b>‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô:</b> <code>{daily_stats['total_pnl']:+,.2f} USDT</code>
<b>TP:</b> <code>{daily_stats['tp_count']}</code> | <b>SL:</b> <code>{daily_stats['sl_count']}</code>

<b>--- ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏û‡∏≠‡∏£‡πå‡∏ï ---</b>
<b>‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</b> <code>{balance:,.2f} USDT</code>
<b>‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏™‡∏∞‡∏™‡∏°:</b> <code>{pnl_from_start:+,.2f} USDT</code>
"""
        return summary
    except Exception as e:
        logger.error(f"‚ùå Error creating summary: {e}")
        return "‚õîÔ∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏î‡πâ"

def start_command(update: Update, context: CallbackContext):
    global trading_thread, initial_balance
    if not trading_active.is_set():
        trading_active.set()
        if initial_balance == 0.0:
            initial_balance = get_portfolio_balance()
        if trading_thread is None or not trading_thread.is_alive():
            trading_thread = threading.Thread(target=trading_logic_loop, daemon=True)
            trading_thread.start()
        msg = "‚úÖ <b>‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß</b>"
        logger.info("Bot started via /start.")
    else:
        msg = "‚ÑπÔ∏è ‡∏ö‡∏≠‡∏ó‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
    update.message.reply_html(msg)

def stop_command(update: Update, context: CallbackContext):
    if trading_active.is_set():
        trading_active.clear()
        msg = "üõë <b>‡∏ö‡∏≠‡∏ó‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß</b> (‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà)"
        logger.info("Bot stopped via /stop.")
    else:
        msg = "‚ÑπÔ∏è ‡∏ö‡∏≠‡∏ó‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
    update.message.reply_html(msg)

def summary_command(update: Update, context: CallbackContext):
    logger.info("Received /summary command.")
    summary_message = get_summary_text()
    update.message.reply_html(summary_message)

def help_command(update: Update, context: CallbackContext):
    help_text = """<b>‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:</b>
/start - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
/stop - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
/summary - ‡∏Ç‡∏≠‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
/help - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠"""
    update.message.reply_html(help_text)

# ==============================================================================
# 14. ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° (ENTRY POINT)
# ==============================================================================
def main():
    global initial_balance
    load_daily_stats()
    
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start_command))
    dispatcher.add_handler(CommandHandler("stop", stop_command))
    dispatcher.add_handler(CommandHandler("summary", summary_command))
    dispatcher.add_handler(CommandHandler("help", help_command))

    logger.info("ü§ñ Bot is live, waiting for commands...")
    send_telegram("ü§ñ <b>‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß</b>\n‡∏û‡∏¥‡∏°‡∏û‡πå /start ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î\n‡∏û‡∏¥‡∏°‡∏û‡πå /help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á")

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
