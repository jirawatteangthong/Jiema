import ccxt
import os
import time
import math # ‡πÄ‡∏û‡∏¥‡πà‡∏° import math ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö math.ceil

# ------------------------------------------------------------------------------
# üîê Load API Credentials from Environment
# ------------------------------------------------------------------------------
API_KEY = os.getenv("RAILWAY_API_KEY")
SECRET = os.getenv("RAILWAY_SECRET")
PASSWORD = os.getenv("RAILWAY_PASSWORD")

if not all([API_KEY, SECRET, PASSWORD]):
    print("Error: Please set RAILWAY_API_KEY, RAILWAY_SECRET, and RAILWAY_PASSWORD environment variables.")
    exit()

# ------------------------------------------------------------------------------
# ‚öôÔ∏è Config Settings
# ------------------------------------------------------------------------------
SYMBOL = 'ETH/USDT'
TP_DISTANCE = 30
SL_DISTANCE = 50
LEVERAGE = 30
MARGIN_BUFFER = 2

# ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ Minimum Notional Value (‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥) ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OKX
# ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏¢‡πÜ ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 10 ‡∏´‡∏£‡∏∑‡∏≠ 20 USDT
# ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û Max Buy Cost 113.74 ‡∏≠‡∏≤‡∏à‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏π‡∏á
# ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å .amountToPrecision() ‡∏Ç‡∏≠‡∏á Exchange
MIN_NOTIONAL_VALUE_USDT = 10 # ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á error
CONTRACT_SIZE_UNIT = 0.001 # ETH contracts are usually in 0.001 or 0.01 units. Check OKX's minimum trade unit for ETH/USDT.

# ------------------------------------------------------------------------------
# üîå Connect to OKX Exchange (Futures, Cross Margin)
# ------------------------------------------------------------------------------
def connect_exchange():
    return ccxt.okx({
        'apiKey': API_KEY,
        'secret': SECRET,
        'password': PASSWORD,
        'enableRateLimit': True,
        'options': {
            'defaultType': 'swap',
            'defaultMarket': 'linear',
            'marginMode': 'cross',
        },
        'urls': {
            'api': {
                'public': 'https://www.okx.com/api/v5/public',
                'private': 'https://www.okx.com/api/v5/private',
            }
        }
    })

exchange = connect_exchange()

# ------------------------------------------------------------------------------
# üî¢ Calculate number of contracts based on 80% of balance
# ------------------------------------------------------------------------------
def calculate_order_amount(available_usdt: float, price: float, leverage: int) -> float: # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô float ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
    if price <= 0 or leverage <= 0:
        print("Error: Price and leverage must be positive.")
        return 0

    desired_margin = available_usdt * 0.80
    notional = desired_margin * leverage

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ï‡∏≤‡∏° Notional Value ‡∏ó‡∏µ‡πà OKX ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    # Minimum contracts based on min notional value
    min_contracts_by_notional = MIN_NOTIONAL_VALUE_USDT / price

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Notional Value ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
    calculated_contracts = notional / price

    # ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á min_contracts_by_notional ‡∏Å‡∏±‡∏ö calculated_contracts
    contracts_to_open = max(calculated_contracts, min_contracts_by_notional)

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö contracts_to_open ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    # Margin ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á = (contracts_to_open * price) / leverage
    required_margin = (contracts_to_open * price) / leverage

    if available_usdt < required_margin + MARGIN_BUFFER:
        print(f"‚ùå Margin ‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {contracts_to_open:.4f} ‡∏™‡∏±‡∏ç‡∏ç‡∏≤ (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ {required_margin:.2f} + {MARGIN_BUFFER} USDT)")
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏Ñ‡πà 1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Ç‡∏≠‡∏á ETH ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏≠
        # This fallback is for 1 unit of ETH, not 1 "contract" as defined by OKX minimum.
        # This needs to be precisely aligned with OKX's actual minimum tradable unit.
        # Let's try to ensure at least 1 unit of CONTRACT_SIZE_UNIT.
        min_unit_notional = CONTRACT_SIZE_UNIT * price
        min_unit_margin = min_unit_notional / leverage
        if available_usdt >= min_unit_margin + MARGIN_BUFFER:
            # ‚úÖ ‡πÉ‡∏ä‡πâ exchange.amount_to_precision ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏° Exchange step size
            # ‡∏ï‡πâ‡∏≠‡∏á fetch market info ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ amount_to_precision ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡πâ‡∏≤‡∏¢ logic ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì amount ‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô open_short_order
            # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á exchange.market(SYMBOL)
            return CONTRACT_SIZE_UNIT # ‡∏´‡∏£‡∏∑‡∏≠ 1 ‡∏™‡∏±‡∏ç‡∏ç‡∏≤ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏≤‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ 1 ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Ñ‡∏∑‡∏≠ 0.001 ETH
        return 0 # ‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏à‡∏£‡∏¥‡∏á‡πÜ

    # ‚úÖ ‡πÉ‡∏ä‡πâ exchange.amount_to_precision ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö step size ‡∏ó‡∏µ‡πà Exchange ‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    # ‡∏ï‡πâ‡∏≠‡∏á fetch market info ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ amount_to_precision ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ return float ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏±‡∏î‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
    # ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á info ‡∏Ç‡∏≠‡∏á Market ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏•‡∏¢
    # market_info = exchange.market(SYMBOL)
    # return exchange.amount_to_precision(market_info['symbol'], contracts_to_open)
    return contracts_to_open


# ------------------------------------------------------------------------------
# üîç Check if a Short position already exists
# ------------------------------------------------------------------------------
def get_open_position():
    try:
        positions = exchange.fetch_positions([SYMBOL])
        for pos in positions:
            if pos['symbol'] == SYMBOL and pos['contracts'] > 0 and pos['side'] == 'short':
                return pos
        return None
    except ccxt.NetworkError as e:
        print(f"Network error fetching positions: {e}")
        return None
    except ccxt.ExchangeError as e:
        print(f"Exchange error fetching positions: {e}")
        return None
    except Exception as e:
        print(f"An unexpected error occurred while fetching positions: {e}")
        return None

# ------------------------------------------------------------------------------
# üìâ Open Short Market Order + Set TP then SL
# ------------------------------------------------------------------------------
def open_short_order():
    try:
        # ‚úÖ ‡∏î‡∏∂‡∏á Market Info ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö amount_to_precision
        market_info = exchange.market(SYMBOL)
        if not market_info:
            print(f"‚ùå Could not fetch market info for {SYMBOL}.")
            return

        ticker = exchange.fetch_ticker(SYMBOL)
        current_price = ticker['last']
        print(f"\nüìä Current Price of {SYMBOL}: {current_price:.2f} USDT")

        balance = exchange.fetch_balance({'type': 'swap'})
        available_usdt = float(balance.get('total', {}).get('USDT', 0))
        print(f"üí∞ Available Margin (OKX): {available_usdt:.2f} USDT")

        existing_position = get_open_position()
        if existing_position:
            print(f"‚ö†Ô∏è An open short position already exists for {SYMBOL} (size: {existing_position['contracts']}). Skipping new order.")
            return

        # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° Exchange step size
        raw_order_amount = calculate_order_amount(available_usdt, current_price, LEVERAGE)
        order_amount = exchange.amount_to_precision(SYMBOL, raw_order_amount) # ‚úÖ ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ order_amount ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å‡πÜ)
        if float(order_amount) < market_info['limits']['amount']['min']: # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö min amount ‡∏Ç‡∏≠‡∏á Exchange
             print(f"‚ùå Calculated order amount {order_amount} is less than exchange's minimum amount {market_info['limits']['amount']['min']}.")
             return

        estimated_used_margin = (float(order_amount) * current_price) / LEVERAGE
        print(f"üìà Estimated Margin for Order: {estimated_used_margin:.2f} USDT")
        print(f"üî¢ Opening quantity: {order_amount} contracts")

        tp_price = round(current_price - TP_DISTANCE, 1)
        sl_price = round(current_price + SL_DISTANCE, 1)
        print(f"üéØ Calculated TP: {tp_price} | üõë Calculated SL: {sl_price}")

        # --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏õ‡∏¥‡∏î Market Short Order ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ TP/SL ---
        print(f"‚è≥ Placing market SELL order for {order_amount} contracts of {SYMBOL}...")
        order = exchange.create_market_sell_order(
            symbol=SYMBOL,
            amount=float(order_amount), # ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô float
            params={
                "tdMode": "cross",
                "reduceOnly": False,
            }
        )
        print(f"‚úÖ Market SELL order placed: ID ‚Üí {order['id']}")
        time.sleep(2) # ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

        # --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏±‡πâ‡∏á TP Order (Limit Order) ---
        print(f"‚è≥ Setting Take Profit order at {tp_price}...")
        try:
            tp_order = exchange.create_order(
                symbol=SYMBOL,
                type='limit',
                side='buy',
                amount=float(order_amount), # ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô float
                price=tp_price,
                params={
                    "tdMode": "cross",
                    "posSide": "short",
                    "reduceOnly": True,
                }
            )
            print(f"‚úÖ Take Profit order placed: ID ‚Üí {tp_order['id']}")
        except ccxt.BaseError as e:
            print(f"‚ùå Failed to set Take Profit order: {str(e)}")

        # --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ï‡∏±‡πâ‡∏á SL Order (Stop Market Order) ---
        print(f"‚è≥ Setting Stop Loss order at {sl_price}...")
        try:
            sl_order = exchange.create_order(
                symbol=SYMBOL,
                type='stop_market',
                side='buy',
                amount=float(order_amount), # ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô float
                price=None,
                params={
                    "tdMode": "cross",
                    "posSide": "short",
                    "reduceOnly": True,
                    "triggerPx": str(sl_price),
                    "ordPx": "-1"
                }
            )
            print(f"‚úÖ Stop Loss order placed: ID ‚Üí {sl_order['id']}")
        except ccxt.BaseError as e:
            print(f"‚ùå Failed to set Stop Loss order: {str(e)}")

    except ccxt.NetworkError as e:
        print(f"‚ùå Network error during order placement: {e}")
    except ccxt.ExchangeError as e:
        print(f"‚ùå Exchange error during order placement: {e}")
        print("üí° Exchange Error. This might be due to insufficient funds (again), or an unexpected parameter from OKX.")
        print(f"Error details: {e}") # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î error ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    except Exception as e:
        print(f"‚ùå An unexpected error occurred: {e}")

# ------------------------------------------------------------------------------
# üöÄ Start Bot
# ------------------------------------------------------------------------------
if __name__ == "__main__":
    print("\nüöÄ Starting the trading bot...\n")
    open_short_order()
