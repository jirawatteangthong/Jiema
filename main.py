import ccxt
import os
import time

# ------------------------------------------------------------------------------
# üîê Load API Credentials from Environment
# ------------------------------------------------------------------------------
API_KEY = os.getenv("OKX_API_KEY")
SECRET = os.getenv("OKX_SECRET")
PASSWORD = os.getenv("OKX_PASSWORD")

if not all([API_KEY, SECRET, PASSWORD]):
    print("Error: Please set OKX_API_KEY, OKX_SECRET, and OKX_PASSWORD environment variables.")
    exit()

# ------------------------------------------------------------------------------
# ‚öôÔ∏è Config Settings
# ------------------------------------------------------------------------------
SYMBOL = 'ETH/USDT'
# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Short: TP_DISTANCE ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô "‡∏•‡∏á‡πÑ‡∏õ"
# SL_DISTANCE ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô "‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ"
TP_DISTANCE = 30    # Take Profit ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏á‡πÑ‡∏õ 30 USDT
SL_DISTANCE = 50    # Stop Loss ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ 50 USDT
LEVERAGE = 30
MARGIN_BUFFER = 2

# ------------------------------------------------------------------------------
# üîå Connect to OKX Exchange (Futures, Cross Margin)
# ------------------------------------------------------------------------------
def connect_exchange():
    return ccxt.okx({
        'apiKey': API_KEY,
        'secret': SECRET,
        'password': PASSWORD,
        'enableRateLimit': True,
        'options': {
            'defaultType': 'swap',
            'defaultMarket': 'linear',
            'marginMode': 'cross',
        },
        'urls': {
            'api': {
                'public': 'https://www.okx.com/api/v5/public',
                'private': 'https://www.okx.com/api/v5/private',
            }
        }
    })

exchange = connect_exchange()

# ------------------------------------------------------------------------------
# üî¢ Calculate number of contracts based on 80% of balance
# ------------------------------------------------------------------------------
def calculate_order_amount(available_usdt: float, price: float, leverage: int) -> int:
    if price <= 0 or leverage <= 0:
        print("Error: Price and leverage must be positive.")
        return 0

    desired_margin = available_usdt * 0.80
    notional = desired_margin * leverage
    contracts = int(notional / price)

    min_margin_for_one_contract = price / leverage
    if contracts < 1 and available_usdt >= min_margin_for_one_contract + MARGIN_BUFFER:
        return 1
    return contracts

# ------------------------------------------------------------------------------
# üîç Check if a Short position already exists
# ------------------------------------------------------------------------------
def get_open_position():
    positions = exchange.fetch_positions([SYMBOL])
    for pos in positions:
        # üü¢ ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 'long' ‡πÄ‡∏õ‡πá‡∏ô 'short' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Short
        if pos['symbol'] == SYMBOL and pos['contracts'] > 0 and pos['side'] == 'short':
            return pos
    return None

# ------------------------------------------------------------------------------
# üìâ Open Short Market Order + TP/SL
# ------------------------------------------------------------------------------
def open_short_order(): # üü¢ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á
    try:
        ticker = exchange.fetch_ticker(SYMBOL)
        current_price = ticker['last']
        print(f"\nüìä Current Price of {SYMBOL}: {current_price:.2f} USDT")

        balance = exchange.fetch_balance({'type': 'swap'})
        available_usdt = float(balance.get('total', {}).get('USDT', 0))
        print(f"üí∞ Available Margin (OKX): {available_usdt:.2f} USDT")

        # üü¢ ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Short ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        existing_position = get_open_position()
        if existing_position:
            print(f"‚ö†Ô∏è An open short position already exists for {SYMBOL} (size: {existing_position['contracts']}). Skipping new order.")
            return

        order_amount = calculate_order_amount(available_usdt, current_price, LEVERAGE)

        if order_amount < 1:
            print("‚ùå Insufficient margin to open even the minimum order (1 contract).")
            return

        estimated_used_margin = (order_amount * current_price) / LEVERAGE
        print(f"üìà Estimated Margin for Order: {estimated_used_margin:.2f} USDT")
        print(f"üî¢ Opening quantity: {order_amount} contracts")

        # üü¢ ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 3: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì TP/SL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Short
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Short: TP ‡∏à‡∏∞‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô, SL ‡∏à‡∏∞‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        tp_price = round(current_price - TP_DISTANCE, 1) # TP_DISTANCE ‡∏•‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤
        sl_price = round(current_price + SL_DISTANCE, 1) # SL_DISTANCE ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤
        print(f"üéØ TP: {tp_price} | üõë SL: {sl_price}")

        # üü¢ ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 4: ‡πÉ‡∏ä‡πâ create_market_sell_order ‡πÅ‡∏ó‡∏ô create_market_buy_order
        # ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô posSide ‡πÄ‡∏õ‡πá‡∏ô 'short'
        order = exchange.create_market_sell_order( # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô sell order
            symbol=SYMBOL,
            amount=order_amount,
            params={
                "tdMode": "cross",
                "posSide": "short", # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 'short'
                "reduceOnly": False,
            },
            takeProfit={'type': 'market', 'price': tp_price},
            stopLoss={'type': 'market', 'price': sl_price},
        )
        print(f"‚úÖ Short order successfully placed: Order ID ‚Üí {order['id']}")

    except ccxt.NetworkError as e:
        print(f"‚ùå Network error during order placement: {e}")
    except ccxt.ExchangeError as e:
        print(f"‚ùå Exchange error during order placement: {e}")
    except Exception as e:
        print(f"‚ùå An unexpected error occurred: {e}")

# ------------------------------------------------------------------------------
# üöÄ Start Bot
# ------------------------------------------------------------------------------
if __name__ == "__main__":
    print("\nüöÄ Starting the trading bot...\n")
    open_short_order() # üü¢ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô open_short_order
