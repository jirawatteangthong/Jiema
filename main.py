import ccxt
import time
import requests
from datetime import datetime, timedelta
import logging
import threading
import json
import os
import calendar
import sys

# ==============================================================================
# 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (CONFIGURATION)
# ==============================================================================

# --- API Keys & Credentials (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Environment Variables ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢) ---
API_KEY = os.getenv('RAILWAY_API_KEY', 'YOUR_API_KEY_HERE_FOR_LOCAL_TESTING')
SECRET = os.getenv('RAILWAY_SECRET', 'YOUR_SECRET_HERE_FOR_LOCAL_TESTING')
PASSWORD = os.getenv('RAILWAY_PASSWORD', 'YOUR_PASSWORD_HERE_FOR_LOCAL_TESTING')

# --- Trade Parameters ---
SYMBOL = 'BTC/USDT:USDT'
TIMEFRAME = '15m' # ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
LEVERAGE = 30
TP_VALUE_POINTS = 501
SL_VALUE_POINTS = 999
BE_PROFIT_TRIGGER_POINTS = 350
BE_SL_BUFFER_POINTS = 100
CONTRACTS_PER_SLOT = 40 # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ï‡πà‡∏≠ "‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÑ‡∏°‡πâ" (1 contract = 1 USD ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BTC/USDT-SWAP)
CROSS_THRESHOLD_POINTS = 5 # ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
MIN_BALANCE_SAFETY_MARGIN = 50  # ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏ß‡πâ (USDT)
MAX_POSITION_SIZE_LIMIT = 1000  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (contracts)
REQUIRED_MARGIN_BUFFER_PERCENT = 0.10 # 10% ‡∏Ç‡∏≠‡∏á Margin ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÅ‡∏•‡∏∞ Margin ‡πÅ‡∏ù‡∏á)

# ‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô confirm_position_entry)
CONFIRMATION_RETRIES = 15  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô
CONFIRMATION_SLEEP = 3  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô

# --- Telegram Notification Settings ---
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', 'YOUR_TELEGRAM_TOKEN_HERE_FOR_LOCAL_TESTING')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', 'YOUR_CHAT_ID_HERE_FOR_LOCAL_TESTING')

# --- Files & Paths ---
STATS_FILE = 'trading_stats.json' # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô /data/trading_stats.json ‡∏´‡∏≤‡∏Å‡πÉ‡∏ä‡πâ Railway Volume

# --- Bot Timing ---
# ‡∏•‡∏î MAIN_LOOP_SLEEP_SECONDS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ô‡∏ß‡∏ô‡∏ñ‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á
MAIN_LOOP_SLEEP_SECONDS = 3600 * 24 # 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏±‡∏Å‡∏ô‡∏≤‡∏ô‡πÜ
ERROR_RETRY_SLEEP_SECONDS = 60
MONTHLY_REPORT_DAY = 20
MONTHLY_REPORT_HOUR = 0
MONTHLY_REPORT_MINUTE = 5

# --- Tolerance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ---
TP_SL_BE_PRICE_TOLERANCE_PERCENT = 0.005 

# ==============================================================================
# 2. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging
# ==============================================================================
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
for handler in logging.root.handlers:
    if hasattr(handler, 'flush'):
        handler.flush = lambda: sys.stdout.flush() if isinstance(handler, logging.StreamHandler) else handler.stream.flush()

logger = logging.getLogger(__name__)


# ==============================================================================
# 3. ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î (GLOBAL TRADE STATE VARIABLES)
# ==============================================================================
current_position = None
entry_price = None
sl_moved = False
portfolio_balance = 0.0
last_monthly_report_date = None
initial_balance = 0.0
current_position_size = 0.0 # ‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ Contracts
last_ema_position_status = None # 'above', 'below', ‡∏´‡∏£‡∏∑‡∏≠ None (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏•‡∏≠‡∏á
TEST_MODE_ORDER_PLACED = False

# ==============================================================================
# 4. ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ (STATISTICS DATA STRUCTURE)
# ==============================================================================
monthly_stats = {
    'month_year': None,
    'tp_count': 0,
    'sl_count': 0,
    'total_pnl': 0.0,
    'trades': [],
    'last_report_month_year': None,
    'last_ema_cross_signal': None, 
    'last_ema_position_status': None # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ EMA ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Cross
}

# ==============================================================================
# 5. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Exchange (CCXT EXCHANGE SETUP)
# ==============================================================================
try:
    if not API_KEY or API_KEY == 'YOUR_API_KEY_HERE_FOR_LOCAL_TESTING' or \
       not SECRET or SECRET == 'YOUR_SECRET_HERE_FOR_LOCAL_TESTING' or \
       not PASSWORD or PASSWORD == 'YOUR_PASSWORD_HERE_FOR_LOCAL_TESTING':
        raise ValueError("API_KEY, SECRET, ‡∏´‡∏£‡∏∑‡∏≠ PASSWORD ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Environment Variables.")

    exchange = ccxt.okx({
        'apiKey': API_KEY,
        'secret': SECRET,
        'password': PASSWORD,
        'enableRateLimit': True,
        'rateLimit': 1000,
        'options': {
            'defaultType': 'swap',
            'warnOnFetchOHLCVLimitArgument': False,
            'adjustForTimeDifference': True,
            'loadMarkets': False, 
            'loadInstruments': False,
            'loadCurrencies': False,
        },
        'verbose': False, 
        'timeout': 30000,
    })
    exchange.set_sandbox_mode(False) # ‚ö†Ô∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô False ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏à‡∏£‡∏¥‡∏á
    logger.info("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö OKX Exchange ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

except ValueError as ve:
    logger.critical(f"‚ùå Configuration Error: {ve}", exc_info=True)
    exit()
except Exception as e:
    logger.critical(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Exchange ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏î‡πâ: {e}", exc_info=True)
    exit()

# ==============================================================================
# 6. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ (STATISTICS MANAGEMENT FUNCTIONS)
# ==============================================================================

def save_monthly_stats():
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON."""
    global monthly_stats, last_ema_position_status
    try:
        monthly_stats['last_ema_position_status'] = last_ema_position_status
        with open(STATS_FILE, 'w') as f:
            json.dump(monthly_stats, f, indent=4)
        logger.debug(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå {STATS_FILE} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏¥‡∏ï‡∏¥‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: {e}")

def reset_monthly_stats():
    """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà."""
    global monthly_stats, last_ema_position_status
    monthly_stats['month_year'] = datetime.now().strftime('%Y-%m')
    monthly_stats['tp_count'] = 0
    monthly_stats['sl_count'] = 0
    monthly_stats['total_pnl'] = 0.0
    monthly_stats['trades'] = []
    last_ema_position_status = None 
    save_monthly_stats() 
    logger.info(f"üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {monthly_stats['month_year']}")

def load_monthly_stats():
    """‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON."""
    global monthly_stats, last_monthly_report_date, last_ema_position_status
    try:
        if os.path.exists(STATS_FILE):
            with open(STATS_FILE, 'r') as f:
                loaded_stats = json.load(f)

                monthly_stats['month_year'] = loaded_stats.get('month_year', None)
                monthly_stats['tp_count'] = loaded_stats.get('tp_count', 0)
                monthly_stats['sl_count'] = loaded_stats.get('sl_count', 0)
                monthly_stats['total_pnl'] = loaded_stats.get('total_pnl', 0.0)
                monthly_stats['trades'] = loaded_stats.get('trades', [])
                monthly_stats['last_report_month_year'] = loaded_stats.get('last_report_month_year', None)
                monthly_stats['last_ema_cross_signal'] = loaded_stats.get('last_ema_cross_signal', None)
                last_ema_position_status = loaded_stats.get('last_ema_position_status', None)

            logger.info(f"üíæ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå {STATS_FILE} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

            if monthly_stats['last_report_month_year']:
                try:
                    year, month = map(int, monthly_stats['last_report_month_year'].split('-'))
                    last_monthly_report_date = datetime(year, month, 1).date()
                except ValueError:
                    logger.warning("‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà last_report_report_month_year ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á. ‡∏à‡∏∞‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô.")
                    last_monthly_report_date = None
            else:
                last_monthly_report_date = None

            current_month_year_str = datetime.now().strftime('%Y-%m')
            if monthly_stats['month_year'] != current_month_year_str:
                logger.info(f"‚ÑπÔ∏è ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {monthly_stats['month_year']} ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ {current_month_year_str}. ‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà.")
                reset_monthly_stats()

        else:
            logger.info(f"üÜï ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ {STATS_FILE} ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà")
            reset_monthly_stats()

    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: {e}", exc_info=True)
        monthly_stats = {
            'month_year': None, 'tp_count': 0, 'sl_count': 0, 'total_pnl': 0.0, 'trades': [],
            'last_report_month_year': None, 'last_ema_cross_signal': None, 'last_ema_position_status': None
        }
        last_monthly_report_date = None
        last_ema_position_status = None
        reset_monthly_stats()

def add_trade_result(reason: str, pnl: float):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏•‡∏á‡πÉ‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô."""
    global monthly_stats
    current_month_year_str = datetime.now().strftime('%Y-%m')

    if monthly_stats['month_year'] != current_month_year_str:
        logger.info(f"üÜï ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏ô add_trade_result: {monthly_stats['month_year']} -> {current_month_year_str}. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô.")
        reset_monthly_stats()

    if reason.upper() == 'TP':
        monthly_stats['tp_count'] += 1
    elif reason.upper() == 'SL' or reason.upper() == 'SL (‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô)':
        monthly_stats['sl_count'] += 1

    monthly_stats['total_pnl'] += pnl

    monthly_stats['trades'].append({
        'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'reason': reason,
        'pnl': pnl
    })
    save_monthly_stats()

# ==============================================================================
# 7. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Telegram (TELEGRAM NOTIFICATION FUNCTIONS)
# ==============================================================================

def send_telegram(msg: str):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Telegram."""
    if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == 'YOUR_TELEGRAM_TOKEN_HERE_FOR_LOCAL_TESTING' or \
       not TELEGRAM_CHAT_ID or TELEGRAM_CHAT_ID == 'YOUR_CHAT_ID_HERE_FOR_LOCAL_TESTING':
        logger.warning("‚ö†Ô∏è TELEGRAM_TOKEN ‡∏´‡∏£‡∏∑‡∏≠ TELEGRAM_CHAT_ID ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤. ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram ‡πÑ‡∏î‡πâ.")
        return

    try:
        url = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage'
        params = {'chat_id': TELEGRAM_CHAT_ID, 'text': msg, 'parse_mode': 'HTML'}
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        logger.info(f"‚úâÔ∏è Telegram: {msg.splitlines()[0]}...")
    except requests.exceptions.Timeout:
        logger.error("‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram ‡πÑ‡∏î‡πâ (Timeout)")
    except requests.exceptions.HTTPError as e:
        telegram_error_msg = e.response.json().get('description', e.response.text)
        logger.error(f"‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram ‡πÑ‡∏î‡πâ (HTTP Error) - ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {telegram_error_msg}")
    except requests.exceptions.RequestException as e:
        logger.error(f"‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram ‡πÑ‡∏î‡πâ (Request Error) - {e}")
    except Exception as e:
        logger.error(f"‚ùå Unexpected Telegram error: {e}")

# ==============================================================================
# 8. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Exchange (EXCHANGE DATA RETRIEVAL FUNCTIONS)
# ==============================================================================

def get_portfolio_balance() -> float:
    """‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ USDT ‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Trading/Swap)."""
    global portfolio_balance
    retries = 3
    for i in range(retries):
        try:
            logger.debug(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (Attempt {i+1}/{retries})...")
            balance_data = exchange.fetch_balance(params={'type': 'trading'})
            time.sleep(2)

            usdt_balance = float(balance_data.get('USDT', {}).get('free', 0.0))
            if usdt_balance > 0:
                portfolio_balance = usdt_balance
                logger.info(f"üí∞ ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ USDT (Trading Account): {usdt_balance:,.2f}")
                return usdt_balance
            else:
                 logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö 'free' balance ‡πÉ‡∏ô USDT, ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å 'total'...")
                 usdt_balance_total = float(balance_data.get('USDT', {}).get('total', 0.0))
                 portfolio_balance = usdt_balance_total
                 logger.info(f"üí∞ ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ USDT (Total): {usdt_balance_total:,.2f}")
                 return usdt_balance_total

        except (ccxt.NetworkError, ccxt.ExchangeError) as e:
            logger.warning(f"‚ö†Ô∏è Error fetching balance (Attempt {i+1}/{retries}): {e}. Retrying in 15 seconds...")
            if i == retries - 1:
                send_telegram(f"‚õîÔ∏è API Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ (Attempt {i+1}/{retries})\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
            time.sleep(15)
        except Exception as e:
            logger.error(f"‚ùå Unexpected error in get_portfolio_balance: {e}", exc_info=True)
            send_telegram(f"‚õîÔ∏è Unexpected Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
            return 0.0
    logger.error(f"‚ùå Failed to fetch balance after {retries} attempts.")
    send_telegram(f"‚õîÔ∏è API Error: ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å {retries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á.")
    return 0.0

def get_current_position() -> dict | None:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô BTC/USDT ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏° retry."""
    retries = 3
    for i in range(retries):
        try:
            logger.debug(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (Attempt {i+1}/{retries})...")
            positions = exchange.fetch_positions([SYMBOL])
            logger.debug(f"DEBUG: Fetched positions raw: {positions}") 
            time.sleep(2)
            for pos in positions:
                if float(pos.get('info', {}).get('posAmt', 0)) != 0:
                    pos_amount = float(pos['info']['posAmt'])
                    return {
                        'side': 'long' if pos_amount > 0 else 'short',
                        'size': abs(pos_amount), # ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Contracts
                        'entry_price': float(pos['entryPrice']),
                        'unrealized_pnl': float(pos['unrealizedPnl']),
                        'pos_id': pos.get('id', 'N/A')
                    }
            return None
        except (ccxt.NetworkError, ccxt.ExchangeError) as e:
            logger.warning(f"‚ö†Ô∏è Error fetching positions (Attempt {i+1}/{retries}): {e}. Retrying in 15 seconds...")
            if i == retries - 1:
                send_telegram(f"‚õîÔ∏è API Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ (Attempt {i+1}/{retries})\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
            time.sleep(15)
        except Exception as e:
            logger.error(f"‚ùå Unexpected error in get_current_position: {e}", exc_info=True)
            send_telegram(f"‚õîÔ∏è Unexpected Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
            return 0.0
    logger.error(f"‚ùå Failed to fetch positions after {retries} attempts.")
    send_telegram(f"‚õîÔ∏è API Error: ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å {retries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á.")
    return 0.0

# ==============================================================================
# 9. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Indicators (INDICATOR CALCULATION FUNCTIONS)
#    ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô main loop ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏•‡∏≠‡∏á
# ==============================================================================

def calculate_ema(prices: list[float], period: int) -> float | None:
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Exponential Moving Average (EMA)."""
    if len(prices) < period:
        return None

    sma = sum(prices[:period]) / period
    ema = sma
    multiplier = 2 / (period + 1)

    for price in prices[period:]:
        ema = (price * multiplier) + (ema * (1 - multiplier))

    return ema

def check_ema_cross() -> str | None:
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á EMA50 ‡πÅ‡∏•‡∏∞ EMA200 ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Threshold ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô.
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏ô‡∏µ‡πâ
    """
    global last_ema_position_status 
    
    try:
        retries = 3
        ohlcv = None
        for i in range(retries):
            logger.debug(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OHLCV ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö EMA ({i+1}/{retries})...")
            try:
                ohlcv = exchange.fetch_ohlcv(SYMBOL, TIMEFRAME, limit=250)
                time.sleep(2)
                break
            except (ccxt.NetworkError, ccxt.ExchangeError) as e:
                logger.warning(f"‚ö†Ô∏è Error fetching OHLCV (Attempt {i+1}/{retries}): {e}. Retrying in 15 seconds...")
                if i == retries - 1:
                    send_telegram(f"‚õîÔ∏è API Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á OHLCV ‡πÑ‡∏î‡πâ (Attempt {i+1}/{retries})\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
                time.sleep(15)
            except Exception as e:
                logger.error(f"‚ùå Unexpected error fetching OHLCV: {e}", exc_info=True)
                send_telegram(f"‚õîÔ∏è Unexpected Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á OHLCV ‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
                return None

        if not ohlcv:
            logger.error(f"‚ùå Failed to fetch OHLCV after {retries} attempts.")
            send_telegram(f"‚õîÔ∏è API Error: ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á OHLCV ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å {retries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á.")
            return None

        if len(ohlcv) < 202: 
            logger.warning(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OHLCV ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠. ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 202 ‡πÅ‡∏ó‡πà‡∏á ‡πÑ‡∏î‡πâ {len(ohlcv)}")
            send_telegram(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OHLCV ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ({len(ohlcv)} ‡πÅ‡∏ó‡πà‡∏á).")
            return None

        closes = [candle[4] for candle in ohlcv]

        ema50_current = calculate_ema(closes, 50)
        ema200_current = calculate_ema(closes, 200)

        logger.info(f"üí° EMA Values: Current EMA50={ema50_current:.2f}, EMA200={ema200_current:.2f}") 
        
        if None in [ema50_current, ema200_current]:
            logger.warning("‡∏Ñ‡πà‡∏≤ EMA ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ (‡πÄ‡∏õ‡πá‡∏ô None).")
            return None

        current_ema_position = None
        if ema50_current > ema200_current:
            current_ema_position = 'above'
        elif ema50_current < ema200_current:
            current_ema_position = 'below'
        
        # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ EMA ‡πÄ‡∏•‡∏¢ (‡∏ö‡∏≠‡∏ó‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô)
        if last_ema_position_status is None:
            if current_ema_position:
                last_ema_position_status = current_ema_position
                save_monthly_stats()
                logger.info(f"‚ÑπÔ∏è ‡∏ö‡∏≠‡∏ó‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ EMA ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô: {current_ema_position.upper()}. ‡∏à‡∏∞‡∏£‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ.")
            return None

        cross_signal = None

        # Golden Cross (Long)
        if last_ema_position_status == 'below' and current_ema_position == 'above' and \
           ema50_current > (ema200_current + CROSS_THRESHOLD_POINTS):
            cross_signal = 'long'
            logger.info(f"üöÄ Threshold Golden Cross: EMA50({ema50_current:.2f}) is {CROSS_THRESHOLD_POINTS} points above EMA200({ema200_current:.2f})")

        # Death Cross (Short)
        elif last_ema_position_status == 'above' and current_ema_position == 'below' and \
             ema50_current < (ema200_current - CROSS_THRESHOLD_POINTS):
            cross_signal = 'short'
            logger.info(f"üîª Threshold Death Cross: EMA50({ema50_current:.2f}) is {CROSS_THRESHOLD_POINTS} points below EMA200({ema200_current:.2f})")

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ EMA ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏™‡∏°‡∏≠
        if current_ema_position and cross_signal is None:
            last_ema_position_status = current_ema_position
            save_monthly_stats() 

        if cross_signal:
            logger.info(f"‚ú® ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì EMA Cross ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: {cross_signal.upper()}")
        else:
            logger.info("üîé ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì EMA Cross ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô.") 
            
        return cross_signal

    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA: {e}", exc_info=True)
        send_telegram(f"‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA ‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
        return None

# ==============================================================================
# 10. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
# ==============================================================================

def validate_trading_parameters(balance: float, contracts_per_slot: int) -> tuple[bool, str]:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
    if balance <= MIN_BALANCE_SAFETY_MARGIN:
        return False, f"‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ({balance:,.2f} USDT) ‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ {MIN_BALANCE_SAFETY_MARGIN} USDT)"

    if contracts_per_slot <= 0:
        return False, f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ({contracts_per_slot})"

    if LEVERAGE <= 0:
        return False, f"‡∏Ñ‡πà‡∏≤ Leverage ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ({LEVERAGE})"

    return True, "OK"

def calculate_safe_position_size(balance: float, initial_margin_rate: float) -> tuple[int, int, float]:
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    available_balance = balance - MIN_BALANCE_SAFETY_MARGIN
    num_of_slots = max(0, int(available_balance / CONTRACTS_PER_SLOT))

    total_contracts_raw = num_of_slots * CONTRACTS_PER_SLOT
    total_contracts = int(total_contracts_raw)  # ‡∏õ‡∏±‡∏î‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°

    total_contracts = min(total_contracts, MAX_POSITION_SIZE_LIMIT)

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Margin ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ (‡πÉ‡∏ä‡πâ initial_margin_rate ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Exchange)
    required_margin = total_contracts * initial_margin_rate 
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° Margin Buffer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÅ‡∏•‡∏∞ Margin ‡πÅ‡∏ù‡∏á
    required_margin_with_buffer = required_margin * (1 + REQUIRED_MARGIN_BUFFER_PERCENT) 

    return num_of_slots, total_contracts, required_margin_with_buffer

def check_exchange_limits(market: dict, total_contracts: int) -> tuple[int, bool]:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Ç‡∏≠‡∏á Exchange"""
    min_contracts = market.get('limits', {}).get('amount', {}).get('min')
    min_notional = market.get('limits', {}).get('cost', {}).get('min')

    logger.info(f"‚ÑπÔ∏è Exchange Limits - Min Contracts: {min_contracts}, Min Notional: {min_notional}")

    adjusted_contracts = total_contracts
    limit_applied = False

    if min_contracts is not None and total_contracts < min_contracts:
        adjusted_contracts = int(min_contracts)
        limit_applied = True
        logger.warning(f"‚ö†Ô∏è ‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏≤‡∏Å {total_contracts} ‡πÄ‡∏õ‡πá‡∏ô {adjusted_contracts} ‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Ç‡∏≠‡∏á Exchange")

    return adjusted_contracts, limit_applied

def confirm_position_entry(expected_direction: str, expected_contracts: int) -> tuple[bool, float | None]:
    """‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô"""
    global current_position_size

    size_tolerance = max(1, expected_contracts * 0.005) # tolerance ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 contract

    for attempt in range(CONFIRMATION_RETRIES):
        logger.info(f"‚è≥ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô ({attempt + 1}/{CONFIRMATION_RETRIES})...")
        time.sleep(CONFIRMATION_SLEEP)
        
        try:
            position_info = get_current_position()
            
            if position_info and position_info.get('side') == expected_direction:
                actual_size = position_info.get('size', 0)
                entry_price_confirmed = position_info.get('entry_price') # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
                
                if abs(actual_size - expected_contracts) <= size_tolerance:
                    logger.info(f"‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:")
                    logger.info(f"   - Entry Price: {entry_price_confirmed:.2f}")
                    logger.info(f"   - Size: {actual_size:,.0f} Contracts")
                    logger.info(f"   - Direction: {expected_direction.upper()}")
                    
                    current_position_size = actual_size
                    
                    # ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                    profit_loss = position_info.get('unrealizedPnl', 0)
                    send_telegram(
                        f"üéØ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô {expected_direction.upper()} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n"
                        f"üìä ‡∏Ç‡∏ô‡∏≤‡∏î: {actual_size:,.0f} Contracts\n"
                        f"üí∞ Entry: {entry_price_confirmed:.2f}\n"
                        f"üìà P&L: {profit_loss:,.2f} USDT"
                    )
                    
                    return True, entry_price_confirmed
                else:
                    logger.warning(f"‚ö†Ô∏è ‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: {expected_contracts:,.0f}, ‡πÑ‡∏î‡πâ: {actual_size:,.0f})")
            else:
                logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: {expected_direction})")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô: {e}", exc_info=True) # ‡πÄ‡∏û‡∏¥‡πà‡∏° exc_info
            # return False, None # ‡πÑ‡∏°‡πà return ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
            
    # ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å {CONFIRMATION_RETRIES} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    send_telegram(
        f"‚õîÔ∏è Position Confirmation Failed\n"
        f"üîç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÉ‡∏ô Exchange ‡∏î‡πà‡∏ß‡∏ô!\n"
        f"üìä ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: {expected_direction.upper()} {expected_contracts:,.0f} Contracts"
    )

    return False, None


# ==============================================================================
# 10. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢ (ORDER MANAGEMENT FUNCTIONS)
# ==============================================================================

def open_market_order(direction: str, current_price: float) -> tuple[bool, float | None]:
    """‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå Market ‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ Entry Price."""
    global current_position_size

    try:
        # 1. ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        balance = get_portfolio_balance()
        
        # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
        is_valid, error_msg = validate_trading_parameters(balance, CONTRACTS_PER_SLOT)
        if not is_valid:
            send_telegram(f"‚õîÔ∏è Parameter Error: {error_msg}")
            logger.error(f"‚ùå {error_msg}")
            return False, None
        
        # 3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Margin Rate ‡∏à‡∏≤‡∏Å Exchange (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ)
        # ‡∏î‡∏∂‡∏á market info ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á tiers ‡πÑ‡∏î‡πâ
        market = exchange.market(SYMBOL) 
        initial_margin_rate_val = None
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ initialMarginRate ‡∏à‡∏≤‡∏Å tiers ‡∏Ç‡∏≠‡∏á Exchange
        if 'tiers' in market and market['tiers']: 
            for tier in market['tiers']:
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ tier ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Leverage ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
                # ‡∏´‡∏£‡∏∑‡∏≠ tier ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏° Leverage ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ (OKX tiers ‡∏≠‡∏≤‡∏à‡∏°‡∏µ min/maxLeverage)
                # ‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ initialMarginRate ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î Isolated
                # ‡∏ã‡∏∂‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô structure ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏° Exchange
                
                # ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á tier ‡πÉ‡∏´‡πâ robust ‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                # OKX ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏°‡∏µ 'leverInfo' ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 'info' ‡∏Ç‡∏≠‡∏á market
                if 'info' in market and 'leverInfo' in market['info']:
                    for lever_info in market['info']['leverInfo']:
                        try:
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ leverage ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö leverInfo ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                            # ‡πÅ‡∏•‡∏∞ initialMarginRate ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠ None
                            if float(lever_info.get('lever', 0)) == LEVERAGE and float(lever_info.get('imr', 0)) > 0:
                                initial_margin_rate_val = float(lever_info['imr'])
                                logger.info(f"‚úÖ ‡∏î‡∏∂‡∏á initialMarginRate ‡∏à‡∏≤‡∏Å Exchange ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {initial_margin_rate_val:.4f} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Leverage {LEVERAGE}x")
                                break
                        except (ValueError, TypeError):
                            continue # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ

                if initial_margin_rate_val is not None:
                    break # ‡∏´‡∏≤‡∏Å‡πÄ‡∏à‡∏≠‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å leverInfo ‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏¢‡∏∏‡∏î‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        
        if initial_margin_rate_val is None:
            logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á initialMarginRate ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Leverage {LEVERAGE}x ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Exchange ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå. ‡∏à‡∏∞‡πÉ‡∏ä‡πâ 1 / LEVERAGE ‡πÅ‡∏ó‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ fallback.")
            # Fallback ‡∏´‡∏≤‡∏Å‡∏´‡∏≤‡∏à‡∏≤‡∏Å Exchange ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
            # ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡πÄ‡∏ä‡πà‡∏ô 0.20 ‡∏´‡∏£‡∏∑‡∏≠ 0.30
            initial_margin_rate_val = 1 / LEVERAGE 

        # 4. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞ Margin ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        num_of_slots, total_contracts, required_margin_with_buffer = calculate_safe_position_size(balance, initial_margin_rate_val)
        
        if num_of_slots <= 0:
            error_msg = f"‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ({balance:,.2f} USDT) ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ ({CONTRACTS_PER_SLOT} Contracts/‡πÑ‡∏°‡πâ) ‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å Safety Margin."
            send_telegram(f"‚õîÔ∏è Balance Error: {error_msg}")
            logger.error(f"‚ùå {error_msg}")
            return False, None
        
        if total_contracts <= 0:
            error_msg = "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì."
            send_telegram(f"‚õîÔ∏è Calculation Error: {error_msg}")
            logger.error(f"‚ùå {error_msg}")
            return False, None
        
        # 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Margin ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
        available_margin = balance - MIN_BALANCE_SAFETY_MARGIN
        if available_margin < required_margin_with_buffer:
            error_msg = (f"Margin ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (‡∏°‡∏µ: {available_margin:,.2f} USDT, "
                         f"‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: {required_margin_with_buffer:,.2f} USDT) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î {total_contracts:,.0f} Contracts.")
            send_telegram(f"‚õîÔ∏è Margin Error: {error_msg}")
            logger.error(f"‚ùå {error_msg}")
            return False, None
        
        # 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á Exchange
        final_contracts, limit_applied = check_exchange_limits(market, total_contracts)
        
        if final_contracts <= 0:
            error_msg = "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Ç‡∏≠‡∏á Exchange"
            send_telegram(f"‚õîÔ∏è Exchange Limit Error: {error_msg}")
            logger.error(f"‚ùå {error_msg}")
            return False, None
        
        # 7. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
        logger.info(f"‚ÑπÔ∏è Trading Summary:")
        logger.info(f"   - Balance: {balance:,.2f} USDT")
        logger.info(f"   - Available for Trade: {available_margin:,.2f} USDT")
        logger.info(f"   - Slots: {num_of_slots} ‡πÑ‡∏°‡πâ")
        logger.info(f"   - Contracts (calculated): {total_contracts:,.0f}")
        logger.info(f"   - Contracts (final after limits): {final_contracts:,.0f}")
        logger.info(f"   - Initial Margin Rate used: {initial_margin_rate_val:.4f}")
        logger.info(f"   - Required Margin (incl. buffer): {required_margin_with_buffer:,.2f} USDT")
        logger.info(f"   - Direction: {direction.upper()}")
        logger.info(f"   - Leverage: {LEVERAGE}x")

        # 8. ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
        side = 'buy' if direction == 'long' else 'sell'
        params = {
            'tdMode': 'isolated', # *** ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 'isolated' ***
            'mgnCcy': 'USDT',
            'posSide': 'long' if direction == 'long' else 'short', # *** ‡πÄ‡∏û‡∏¥‡πà‡∏° posSide ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Isolated Margin ***
        }
        
        order = None
        for attempt in range(3):
            logger.info(f"‚ö°Ô∏è ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Market Order (Attempt {attempt + 1}/3) - {final_contracts:,.0f} Contracts")
            try:
                order = exchange.create_order(
                    SYMBOL, 'market', side, final_contracts, 
                    price=None, params=params
                )
                
                if order and order.get('id'):
                    logger.info(f"‚úÖ Market Order ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {order.get('id')}")
                    time.sleep(2) 
                    break
                else:
                    logger.warning(f"‚ö†Ô∏è Order response ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå (Attempt {attempt + 1}/3)")
                    
            except ccxt.NetworkError as e:
                logger.warning(f"‚ö†Ô∏è Network Error (Attempt {attempt + 1}/3): {e}")
                if attempt == 2:
                    send_telegram(f"‚õîÔ∏è Network Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ\n{str(e)[:200]}...")
                time.sleep(15)
                
            except ccxt.ExchangeError as e:
                logger.warning(f"‚ö†Ô∏è Exchange Error (Attempt {attempt + 1}/3): {e}")
                if attempt == 2:
                    send_telegram(f"‚õîÔ∏è Exchange Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ\n{str(e)[:200]}...")
                time.sleep(15)
                
            except Exception as e:
                logger.error(f"‚ùå Unexpected error (Attempt {attempt + 1}/3): {e}", exc_info=True)
                send_telegram(f"‚õîÔ∏è Unexpected Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ\n{str(e)[:200]}...")
                return False, None
        
        if not order:
            logger.error("‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            send_telegram("‚õîÔ∏è Order Failed: ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            return False, None
        
        # 9. ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô
        return confirm_position_entry(direction, final_contracts)
        
    except Exception as e:
        logger.error(f"‚ùå Critical Error in open_market_order: {e}", exc_info=True)
        send_telegram(f"‚õîÔ∏è Critical Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ\n{str(e)[:200]}...")
        return False, None

# ==============================================================================
# 11. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TP/SL/‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô (TP/SL/BREAKEVER FUNCTIONS)
# ... ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô 'tdMode' ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° 'posSide' ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô
# ... ‡πÇ‡∏õ‡∏£‡∏î‡∏î‡∏π‡πÉ‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö set_tpsl_for_position ‡πÅ‡∏•‡∏∞ move_sl_to_breakeven
# ==============================================================================

# ... ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ...




