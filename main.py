import ccxt
import os
import time

# ------------------------------------------------------------------------------
# üîê Load API Credentials from Environment
# ------------------------------------------------------------------------------
API_KEY = os.getenv("RAILWAY_API_KEY")
SECRET = os.getenv("RAILWAY_SECRET")
PASSWORD = os.getenv("RAILWAY_PASSWORD")

if not all([API_KEY, SECRET, PASSWORD]):
    print("Error: Please set RAILWAY_API_KEY, RAILWAY_SECRET, and RAILWAY_PASSWORD environment variables.")
    exit()

# ------------------------------------------------------------------------------
# ‚öôÔ∏è Config Settings
# ------------------------------------------------------------------------------
SYMBOL = 'ETH/USDT'
TP_DISTANCE = 30
SL_DISTANCE = 50
LEVERAGE = 30
MARGIN_BUFFER = 2

# ------------------------------------------------------------------------------
# üîå Connect to OKX Exchange (Futures, Cross Margin)
# ------------------------------------------------------------------------------
def connect_exchange():
    return ccxt.okx({
        'apiKey': API_KEY,
        'secret': SECRET,
        'password': PASSWORD,
        'enableRateLimit': True,
        'options': {
            'defaultType': 'swap',
            'defaultMarket': 'linear',
            'marginMode': 'cross',
        },
        'urls': {
            'api': {
                'public': 'https://www.okx.com/api/v5/public',
                'private': 'https://www.okx.com/api/v5/private',
            }
        }
    })

exchange = connect_exchange()

# ------------------------------------------------------------------------------
# üî¢ Calculate number of contracts based on 80% of balance
# ------------------------------------------------------------------------------
def calculate_order_amount(available_usdt: float, price: float, leverage: int) -> int:
    if price <= 0 or leverage <= 0:
        print("Error: Price and leverage must be positive.")
        return 0

    desired_margin = available_usdt * 0.80
    notional = desired_margin * leverage
    contracts = int(notional / price)

    min_margin_for_one_contract = price / leverage
    if contracts < 1 and available_usdt >= min_margin_for_one_contract + MARGIN_BUFFER:
        return 1
    return contracts

# ------------------------------------------------------------------------------
# üîç Check if a Short position already exists
# ------------------------------------------------------------------------------
def get_open_position():
    try:
        positions = exchange.fetch_positions([SYMBOL])
        for pos in positions:
            if pos['symbol'] == SYMBOL and pos['contracts'] > 0 and pos['side'] == 'short':
                return pos
        return None
    except ccxt.NetworkError as e:
        print(f"Network error fetching positions: {e}")
        return None
    except ccxt.ExchangeError as e:
        print(f"Exchange error fetching positions: {e}")
        return None
    except Exception as e:
        print(f"An unexpected error occurred while fetching positions: {e}")
        return None

# ------------------------------------------------------------------------------
# üìâ Open Short Market Order + Set TP then SL
# ------------------------------------------------------------------------------
def open_short_order():
    try:
        ticker = exchange.fetch_ticker(SYMBOL)
        current_price = ticker['last']
        print(f"\nüìä Current Price of {SYMBOL}: {current_price:.2f} USDT")

        balance = exchange.fetch_balance({'type': 'swap'})
        available_usdt = float(balance.get('total', {}).get('USDT', 0))
        print(f"üí∞ Available Margin (OKX): {available_usdt:.2f} USDT")

        existing_position = get_open_position()
        if existing_position:
            print(f"‚ö†Ô∏è An open short position already exists for {SYMBOL} (size: {existing_position['contracts']}). Skipping new order.")
            return

        order_amount = calculate_order_amount(available_usdt, current_price, LEVERAGE)

        if order_amount < 1:
            print("‚ùå Insufficient margin to open even the minimum order (1 contract).")
            return

        estimated_used_margin = (order_amount * current_price) / LEVERAGE
        print(f"üìà Estimated Margin for Order: {estimated_used_margin:.2f} USDT")
        print(f"üî¢ Opening quantity: {order_amount} contracts")

        tp_price = round(current_price - TP_DISTANCE, 1) # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Short, TP ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤
        sl_price = round(current_price + SL_DISTANCE, 1) # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Short, SL ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤
        print(f"üéØ Calculated TP: {tp_price} | üõë Calculated SL: {sl_price}")

        # --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏õ‡∏¥‡∏î Market Short Order ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ TP/SL ---
        print(f"‚è≥ Placing market SELL order for {order_amount} contracts of {SYMBOL}...")
        order = exchange.create_market_sell_order(
            symbol=SYMBOL,
            amount=order_amount,
            params={
                "tdMode": "cross",
                "posSide": "short",
                "reduceOnly": False,
            }
        )
        print(f"‚úÖ Market SELL order placed: ID ‚Üí {order['id']}")
        # IMPORTANT: Wait a bit for the order to be confirmed on the exchange
        time.sleep(2) # ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ OKX ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏£‡∏Å

        # --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏±‡πâ‡∏á TP Order (Limit Order) ---
        print(f"‚è≥ Setting Take Profit order at {tp_price}...")
        try:
            tp_order = exchange.create_order(
                symbol=SYMBOL,
                type='limit',      # TP ‡πÄ‡∏õ‡πá‡∏ô Limit Order
                side='buy',        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Short Position, ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢ Buy
                amount=order_amount, # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î
                price=tp_price,
                params={
                    "tdMode": "cross",
                    "posSide": "short",   # ‡∏£‡∏∞‡∏ö‡∏∏ posSide ‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î
                    "reduceOnly": True,   # ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                }
            )
            print(f"‚úÖ Take Profit order placed: ID ‚Üí {tp_order['id']}")
        except ccxt.BaseError as e:
            print(f"‚ùå Failed to set Take Profit order: {str(e)}")
            # If TP fails, you might want to cancel the main order or notify.
            # For simplicity, we just print an error and continue to SL.

        # --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ï‡∏±‡πâ‡∏á SL Order (Stop Market Order) ---
        print(f"‚è≥ Setting Stop Loss order at {sl_price}...")
        try:
            # OKX specific parameters for Stop Market
            sl_order = exchange.create_order(
                symbol=SYMBOL,
                type='stop_market', # ‡∏´‡∏£‡∏∑‡∏≠ 'stop_loss_market' ‡∏ñ‡πâ‡∏≤ 'stop_market' ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                side='buy',         # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Short Position, ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢ Buy
                amount=order_amount,
                price=None,         # Market order ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ price ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ trigger price
                params={
                    "tdMode": "cross",
                    "posSide": "short",
                    "reduceOnly": True,
                    "triggerPx": str(sl_price), # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞ trigger stop loss
                    "ordPx": "-1"               # -1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Market Order ‡πÄ‡∏°‡∏∑‡πà‡∏≠ trigger
                }
            )
            print(f"‚úÖ Stop Loss order placed: ID ‚Üí {sl_order['id']}")
        except ccxt.BaseError as e:
            print(f"‚ùå Failed to set Stop Loss order: {str(e)}")

    except ccxt.NetworkError as e:
        print(f"‚ùå Network error during order placement: {e}")
    except ccxt.ExchangeError as e:
        print(f"‚ùå Exchange error during order placement: {e}")
        print("üí° General Exchange Error. Check OKX dashboard for more details or current market status.")
    except Exception as e:
        print(f"‚ùå An unexpected error occurred: {e}")

# ------------------------------------------------------------------------------
# üöÄ Start Bot
# ------------------------------------------------------------------------------
if __name__ == "__main__":
    print("\nüöÄ Starting the trading bot...\n")
    open_short_order()
