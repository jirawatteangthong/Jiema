import ccxt
import time
import requests
from datetime import datetime, timedelta
import logging
import threading
import json
import os
import asyncio # ‡πÄ‡∏û‡∏¥‡πà‡∏° asyncio ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà

# === ‡πÄ‡∏û‡∏¥‡πà‡∏° Library ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ===
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# ==============================================================================
# 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (CONFIGURATION) - (‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
# ==============================================================================
# --- API Keys & Credentials ---
API_KEY = os.getenv('RAILWAY_API_KEY', 'YOUR_API_KEY_HERE_FOR_LOCAL_TESTING')
SECRET = os.getenv('RAILWAY_SECRET', 'YOUR_SECRET_HERE_FOR_LOCAL_TESTING')
PASSWORD = os.getenv('RAILWAY_PASSWORD', 'YOUR_PASSWORD_HERE_FOR_LOCAL_TESTING')

# --- Trade Parameters ---
SYMBOL = 'BTC/USDT:USDT'
TIMEFRAME = '15m'
LEVERAGE = 30
TP_VALUE_POINTS = 501
SL_VALUE_POINTS = 999
BE_PROFIT_TRIGGER_POINTS = 350
BE_SL_BUFFER_POINTS = 100
PORTFOLIO_PERCENT_TRADE = 0.7
CROSS_THRESHOLD_POINTS = 35

# --- Telegram Notification Settings ---
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', 'YOUR_TELEGRAM_TOKEN_HERE_FOR_LOCAL_TESTING')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', 'YOUR_CHAT_ID_HERE_FOR_LOCAL_TESTING')

# --- Files & Paths ---
STATS_FILE = 'trading_stats.json'

# --- Bot Timing ---
MAIN_LOOP_SLEEP_SECONDS = 60
ERROR_RETRY_SLEEP_SECONDS = 60

# --- Tolerance ---
TP_SL_BE_PRICE_TOLERANCE_PERCENT = 0.005

# (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö)
# (‡∏ú‡∏°‡∏à‡∏∞‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡πÅ‡∏ï‡πà‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)

# ==============================================================================
# 2. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging
# ==============================================================================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ==============================================================================
# 3. ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î (GLOBAL TRADE STATE VARIABLES)
# ==============================================================================
trading_active = threading.Event()
trading_thread = None
current_position = None
entry_price = None
sl_moved = False
portfolio_balance = 0.0
initial_balance = 0.0
current_position_size = 0.0

# ==============================================================================
# 4. ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ (STATISTICS DATA STRUCTURE)
# ==============================================================================
daily_stats = {
    'date': None, 'tp_count': 0, 'sl_count': 0, 'total_pnl': 0.0,
    'trades': [], 'last_report_date': None, 'last_ema_cross_signal': None
}

# ==============================================================================
# 5. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Exchange (CCXT EXCHANGE SETUP)
# ==============================================================================
try:
    if not API_KEY or API_KEY == 'YOUR_API_KEY_HERE_FOR_LOCAL_TESTING' or \
       not SECRET or SECRET == 'YOUR_SECRET_HERE_FOR_LOCAL_TESTING' or \
       not PASSWORD or PASSWORD == 'YOUR_PASSWORD_HERE_FOR_LOCAL_TESTING':
        raise ValueError("API Keys not set.")
    exchange = ccxt.okx({
        'apiKey': API_KEY, 'secret': SECRET, 'password': PASSWORD,
        'enableRateLimit': True, 'rateLimit': 1000,
        'options': {'defaultType': 'swap'}
    })
    exchange.set_sandbox_mode(False)
    logger.info("‚úÖ OKX Exchange Connected")
except Exception as e:
    logger.critical(f"‚ùå Could not connect to OKX: {e}")
    exit()

# ==============================================================================
# 6. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ (STATISTICS MANAGEMENT FUNCTIONS)
# ==============================================================================
def save_daily_stats():
    try:
        with open(STATS_FILE, 'w') as f:
            json.dump(daily_stats, f, indent=4)
    except Exception as e:
        logger.error(f"‚ùå Error saving stats: {e}")

def load_daily_stats():
    global daily_stats
    try:
        if os.path.exists(STATS_FILE):
            with open(STATS_FILE, 'r') as f:
                daily_stats = json.load(f)
            logger.info(f"üíæ Stats loaded from {STATS_FILE}")
            current_date_str = datetime.now().strftime('%Y-%m-%d')
            if daily_stats.get('date') != current_date_str:
                reset_daily_stats()
        else:
            reset_daily_stats()
    except Exception:
        reset_daily_stats()

def reset_daily_stats():
    global daily_stats
    current_date_str = datetime.now().strftime('%Y-%m-%d')
    last_signal = daily_stats.get('last_ema_cross_signal')
    daily_stats = {
        'date': current_date_str, 'tp_count': 0, 'sl_count': 0, 'total_pnl': 0.0,
        'trades': [], 'last_report_date': daily_stats.get('last_report_date'),
        'last_ema_cross_signal': last_signal
    }
    save_daily_stats()
    logger.info(f"üîÑ Daily stats reset for {current_date_str}")

def add_trade_result(reason: str, pnl: float):
    global daily_stats
    current_date_str = datetime.now().strftime('%Y-%m-%d')
    if daily_stats.get('date') != current_date_str:
        reset_daily_stats()
    if reason.upper() == 'TP':
        daily_stats['tp_count'] += 1
    elif reason.upper() in ['SL', 'SL (‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô)']:
        daily_stats['sl_count'] += 1
    daily_stats['total_pnl'] += pnl
    daily_stats['trades'].append({
        'time': datetime.now().strftime('%H:%M:%S'), 'reason': reason, 'pnl': pnl
    })
    save_daily_stats()

# ==============================================================================
# 7. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Telegram (TELEGRAM NOTIFICATION FUNCTIONS)
# ==============================================================================
def send_telegram(msg: str):
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID: return
    try:
        url = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage'
        params = {'chat_id': TELEGRAM_CHAT_ID, 'text': msg, 'parse_mode': 'HTML'}
        requests.get(url, params=params, timeout=10).raise_for_status()
        logger.info(f"‚úâÔ∏è Telegram notification sent.")
    except Exception as e:
        logger.error(f"‚õîÔ∏è Error sending Telegram: {e}")

# ==============================================================================
# 8. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Exchange (EXCHANGE DATA RETRIEVAL FUNCTIONS)
# ==============================================================================
# ... (All functions from get_portfolio_balance to move_sl_to_breakeven are the same as the user provided) ...
# ... I am omitting them here for brevity but they should be in the final file. ...
# ... The user should copy their existing functions from Section 8, 9, 10, 11 into the final file ...

# (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 8-11 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏´‡πâ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
# (‡∏ú‡∏°‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö)
def get_portfolio_balance():
    # ... Your existing code ...
    pass
def get_current_position():
    # ... Your existing code ...
    pass
def calculate_ema(prices: list[float], period: int):
    # ... Your existing code ...
    pass
def check_ema_cross():
    # ... Your existing code ...
    pass
def open_market_order(direction: str, current_price: float):
    # ... Your existing code ...
    pass
def set_tpsl_for_position(pos_direction: str, entry_price_val: float):
    # ... Your existing code ...
    pass
def move_sl_to_breakeven(pos_direction: str, entry_price_val: float):
    # ... Your existing code ...
    pass
def monitor_position(pos_info: dict | None, current_price: float):
    # ... Your existing code ...
    pass

# ==============================================================================
# 12. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏´‡∏•‡∏±‡∏Å (MAIN TRADING LOGIC) - (‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
# ==============================================================================
def trading_logic_loop():
    logger.info("üöÄ Trading thread started. Waiting for signal...")
    while trading_active.is_set():
        try:
            current_pos_info = get_current_position()
            time.sleep(1)
            if not current_pos_info:
                signal = check_ema_cross()
                if signal and signal != daily_stats.get('last_ema_cross_signal'):
                    logger.info(f"‚ú® New valid signal {signal.upper()}. Attempting to open order.")
                    ticker = exchange.fetch_ticker(SYMBOL)
                    if ticker and 'last' in ticker:
                        market_order_success, confirmed_entry_price = open_market_order(signal, ticker['last'])
                        if market_order_success and confirmed_entry_price:
                            set_tpsl_success = set_tpsl_for_position(signal, confirmed_entry_price)
                            if set_tpsl_success:
                                daily_stats['last_ema_cross_signal'] = signal
                                save_daily_stats()
                            else:
                                send_telegram("‚õîÔ∏è <b>FATAL ERROR:</b> Order opened but FAILED to set TP/SL!")
                    else:
                        logger.warning("‚ö†Ô∏è Could not fetch ticker price to open order.")
            else:
                ticker = exchange.fetch_ticker(SYMBOL)
                if ticker and 'last' in ticker:
                    monitor_position(current_pos_info, ticker['last'])
            
            time.sleep(MAIN_LOOP_SLEEP_SECONDS)
        except Exception as e:
            logger.error(f"‚õîÔ∏è Error in trading loop: {e}", exc_info=True)
            time.sleep(ERROR_RETRY_SLEEP_SECONDS)
    logger.info("üõë Trading thread has been stopped.")

# ==============================================================================
# 13. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á TELEGRAM (TELEGRAM COMMAND HANDLERS) - (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
# ==============================================================================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global trading_thread, initial_balance
    if not trading_active.is_set():
        trading_active.set()
        if initial_balance == 0.0:
            initial_balance = get_portfolio_balance()
        if trading_thread is None or not trading_thread.is_alive():
            trading_thread = threading.Thread(target=trading_logic_loop, daemon=True)
            trading_thread.start()
        msg = "‚úÖ <b>‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß</b>"
        logger.info("Bot started via /start.")
    else:
        msg = "‚ÑπÔ∏è ‡∏ö‡∏≠‡∏ó‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
    await update.message.reply_html(msg)

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if trading_active.is_set():
        trading_active.clear()
        msg = "üõë <b>‡∏ö‡∏≠‡∏ó‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß</b> (‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà)"
        logger.info("Bot stopped via /stop.")
    else:
        msg = "‚ÑπÔ∏è ‡∏ö‡∏≠‡∏ó‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
    await update.message.reply_html(msg)

def get_summary_text() -> str:
    # (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢)
    try:
        balance = get_portfolio_balance()
        pnl_from_start = balance - initial_balance if initial_balance > 0 else 0.0
        status_text = "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà ‚úÖ" if trading_active.is_set() else "‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà üõë"
        return f"""üìä <b>‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• ‡∏ì ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {datetime.now().strftime('%d/%m/%Y %H:%M')}</b>
<b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏≠‡∏ó:</b> <b>{status_text}</b>
<b>--- ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ---</b>
<b>‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô:</b> <code>{daily_stats['total_pnl']:+,.2f} USDT</code>
<b>TP:</b> <code>{daily_stats['tp_count']}</code> | <b>SL:</b> <code>{daily_stats['sl_count']}</code>
<b>--- ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏û‡∏≠‡∏£‡πå‡∏ï ---</b>
<b>‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</b> <code>{balance:,.2f} USDT</code>
<b>‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏™‡∏∞‡∏™‡∏°:</b> <code>{pnl_from_start:+,.2f} USDT</code>"""
    except Exception as e:
        logger.error(f"‚ùå Error creating summary: {e}")
        return "‚õîÔ∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏î‡πâ"

async def summary_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("Received /summary command.")
    summary_message = get_summary_text()
    await update.message.reply_html(summary_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """<b>‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:</b>
/start - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
/stop - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
/summary - ‡∏Ç‡∏≠‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
/help - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠"""
    await update.message.reply_html(help_text)

# ==============================================================================
# 14. ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° (ENTRY POINT) - (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
# ==============================================================================
async def post_init(application: Application):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏≠‡∏ó‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
    await application.bot.send_message(
        chat_id=TELEGRAM_CHAT_ID,
        text="ü§ñ <b>‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß</b>\n‡∏û‡∏¥‡∏°‡∏û‡πå /start ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î\n‡∏û‡∏¥‡∏°‡∏û‡πå /help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á",
        parse_mode='HTML'
    )

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Telegram (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)."""
    load_daily_stats()
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Application
    application = Application.builder().token(TELEGRAM_TOKEN).post_init(post_init).build()

    # ‡∏ú‡∏π‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("stop", stop_command))
    application.add_handler(CommandHandler("summary", summary_command))
    application.add_handler(CommandHandler("help", help_command))

    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Telegram
    logger.info("ü§ñ Bot is live, using PTB v20+ syntax, waiting for commands...")
    application.run_polling()

if __name__ == '__main__':
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ asyncio.run() ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    # ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å main() ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    main()
