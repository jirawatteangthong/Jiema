# ==============================================================================
# 1. IMPORTS & CONFIGURATION
# ==============================================================================
import ccxt
import os

# Load API key from environment variables
API_KEY = os.getenv('RAILWAY_API_KEY', 'YOUR_API_KEY_HERE_FOR_LOCAL_TESTING')
SECRET = os.getenv('RAILWAY_SECRET', 'YOUR_SECRET_HERE_FOR_LOCAL_TESTING')
PASSWORD = os.getenv('RAILWAY_PASSWORD', 'YOUR_PASSWORD_HERE_FOR_LOCAL_TESTING')

# --- Settings ---
SYMBOL = "BTC/USDT:USDT"        # OKX Futures symbol
LEVERAGE = 30                   # Leverage used
TP_DISTANCE = 100               # Take profit (+100 USD)
SL_DISTANCE = 400               # Stop loss (-400 USD)
TRADE_PERCENT = 0.8            # Use 80% of available balance
SAFETY_BUFFER = 0.97           # Use only 97% of calculated funds to prevent margin error

# --- Initialize OKX instance ---
exchange = ccxt.okx({
    'apiKey': API_KEY,
    'secret': SECRET,
    'password': PASSWORD,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'swap',  # Futures/Perpetual
    }
})


# ==============================================================================
# 2. UTILITY FUNCTIONS
# ==============================================================================

def set_leverage():
    exchange.set_leverage(LEVERAGE, SYMBOL, params={'marginMode': 'cross'})


def get_cross_balance():
    """‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î USDT ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô cross margin futures"""
    balances = exchange.fetch_balance({'type': 'swap'})
    return balances['total'].get('USDT', 0)


def calculate_order_amount(balance: float) -> float:
    available_margin = balance * 0.95  # ‡∏Å‡∏±‡∏ô‡πÑ‡∏ß‡πâ‡∏≠‡∏µ‡∏Å 5% ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô margin error
    contract_value = 100  # OKX BTC = 100 USD/contract
    max_position_value = available_margin * LEVERAGE
    amount = max_position_value / contract_value
    return round(amount, 2)


def check_existing_position():
    """‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    positions = exchange.fetch_positions([SYMBOL], {'type': 'swap'})
    for p in positions:
        if p['symbol'] == SYMBOL and p['contracts'] > 0:
            return p
    return None


# ==============================================================================
# 3. ORDER LOGIC
# ==============================================================================

def open_long_order():
    # --- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ---
    price = exchange.fetch_ticker(SYMBOL)['last']
    balance = get_cross_balance()
    FIXED_CONTRACT_AMOUNT = 5  # ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 5 ‡∏Å‡πá‡πÑ‡∏î‡πâ
    amount = FIXED_CONTRACT_AMOUNT
    estimated_cost = amount * 100 / LEVERAGE

    print(f"\nüìä ‡∏£‡∏≤‡∏Ñ‡∏≤ BTC ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {price:.2f} USDT")
    print(f"üí∞ Balance: {balance:.2f} USDT")
    print(f"üìà ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏•‡∏±‡∏á buffer: {balance * TRADE_PERCENT * SAFETY_BUFFER:.2f} USDT")
    print(f"üî¢ ‡πÄ‡∏õ‡∏¥‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {amount} ‡∏™‡∏±‡∏ç‡∏ç‡∏≤ (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ margin ‚âà {estimated_cost:.2f} USDT)")

    # --- ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤ margin ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ---
    if balance < estimated_cost:
        print(f"‚ùå Margin ‡πÑ‡∏°‡πà‡∏û‡∏≠! ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ {estimated_cost:.2f} USDT")
        return

    # --- ‡πÄ‡∏õ‡∏¥‡∏î Long Market Order ---
    exchange.create_market_buy_order(
        symbol=SYMBOL,
        amount=amount,
        params={
            'marginMode': 'cross',
            'reduceOnly': False
        }
    )

    # --- ‡∏ï‡∏±‡πâ‡∏á TP/SL ---
    entry_price = price
    tp_price = round(entry_price + TP_DISTANCE, 2)
    sl_price = round(entry_price - SL_DISTANCE, 2)

    print(f"üéØ TP: {tp_price} | üõë SL: {sl_price}")

    # TP: Trigger Price + Market Execution
    exchange.create_order(
        symbol=SYMBOL,
        type='take_profit_market',
        side='sell',
        amount=amount,
        params={
            'triggerPrice': tp_price,
            'orderPx': '-1',  # Market order
            'marginMode': 'cross',
            'reduceOnly': True
        }
    )

    # SL: Trigger Price + Market Execution
    exchange.create_order(
        symbol=SYMBOL,
        type='stop_market',
        side='sell',
        amount=amount,
        params={
            'triggerPrice': sl_price,
            'orderPx': '-1',  # Market order
            'marginMode': 'cross',
            'reduceOnly': True
        }
    )

    print("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå Long + ‡∏ï‡∏±‡πâ‡∏á TP/SL ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n")


# ==============================================================================
# 4. MAIN LOGIC
# ==============================================================================

if __name__ == '__main__':
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...\n")

    set_leverage()

    position = check_existing_position()
    if position:
        print(f"‚ö†Ô∏è ‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ({position['side']}) ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {position['contracts']} ‡∏™‡∏±‡∏ç‡∏ç‡∏≤")
        print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≥\n")
    else:
        open_long_order()
