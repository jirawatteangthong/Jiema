# ================== imports ==================
import ccxt, time, requests, logging, json, os, sys, math
from datetime import datetime

# ================== CONFIG (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ) ==================
API_KEY = os.getenv('BINANCE_API_KEY', 'YOUR_BINANCE_API_KEY_HERE_FOR_LOCAL_TESTING')   # ‡∏Ñ‡∏µ‡∏¢‡πå Binance
SECRET  = os.getenv('BINANCE_SECRET',    'YOUR_BINANCE_SECRET_HERE_FOR_LOCAL_TESTING') # ‡∏ã‡∏µ‡πÄ‡∏Ñ‡∏£‡πá‡∏ï Binance

SYMBOL            = 'BTC/USDT:USDT'   # ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå Futures
TIMEFRAME_H1      = '1h'              # TF ‡πÉ‡∏´‡∏ç‡πà
TIMEFRAME_M5      = '5m'              # TF ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤
LEVERAGE          = 30                # ‡πÄ‡∏•‡πÄ‡∏ß‡∏≠‡πÄ‡∏£‡∏à

# ---- EMA/MACD Parameters ----
EMA_FAST_H1       = 10                # EMA10 ‡∏ö‡∏ô H1  (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
EMA_SLOW_H1       = 50                # EMA50 ‡∏ö‡∏ô H1  (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
WAIT_H1_CLOSE     = False             # False=‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πà‡∏á ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏±‡∏ô‡∏ó‡∏µ | True=‡∏£‡∏≠‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏¥‡∏î  (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)

EMA200_M5         = 200               # EMA200 ‡∏ö‡∏ô M5 (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
MACD_FAST         = 12                # MACD fast (M5) (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
MACD_SLOW         = 26                # MACD slow (M5) (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
MACD_SIGNAL       = 9                 # MACD signal (M5) (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)

# ---- SL ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å Swing M5 ----
SWING_LOOKBACK_M5 = 50                # ‡πÉ‡∏ä‡πâ 50 ‡πÅ‡∏ó‡πà‡∏á M5 ‡∏´‡∏≤ swing ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
SL_EXTRA_POINTS   = 200.0             # ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å swing (BUY: -200 / SELL: +200) (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)

# ---- Trailing SL Steps ----
STEP1_TRIGGER     = 450.0             # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡πÑ‡∏£‡∏ñ‡∏∂‡∏á +450 ‡∏à‡∏∏‡∏î (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
STEP1_SL_OFFSET   = -200.0            # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô SL ‡∏°‡∏≤ Entry-200 (BUY) / Entry+200 (SELL) (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)

STEP2_TRIGGER     = 700.0             # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡πÑ‡∏£‡∏ñ‡∏∂‡∏á +700 ‡∏à‡∏∏‡∏î (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
STEP2_SL_OFFSET   = +500.0            # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô SL ‡∏°‡∏≤ Entry+500 (BUY) / Entry-500 (SELL) (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ) -> ‡πÅ‡∏à‡πâ‡∏á TP

STEP3_TRIGGER     = 950.0             # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡πÑ‡∏£‡∏ñ‡∏∂‡∏á +950 ‡∏à‡∏∏‡∏î (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
STEP3_SL_OFFSET   = +850.0            # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô SL ‡∏°‡∏≤ Entry+850 (BUY) / Entry-850 (SELL) (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ) -> ‡πÅ‡∏à‡πâ‡∏á TP

MANUAL_CLOSE_ALERT_TRIGGER = 1300.0   # ‡∏Å‡∏≥‡πÑ‡∏£ > 1300 pts ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏¥‡∏î (‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥) (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)

# ---- ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì H1 ‡πÉ‡∏´‡∏°‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡∏∑‡∏≠‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô ----
NEW_SIGNAL_ACTION       = 'tighten_sl' # 'tighten_sl' = ‡∏ï‡∏±‡πâ‡∏á SL ‡πÉ‡∏Å‡∏•‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤ / 'close_now' = ‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
NEW_SIGNAL_SL_OFFSET    = 100.0        # ‡∏ï‡∏±‡πâ‡∏á SL ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô 100 pts (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)

# ---- Loop/Timing ----
FAST_LOOP_SECONDS       = 3            # ‡∏£‡∏≠‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏£‡πá‡∏ß (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
H1_CHECK_INTERVAL_SEC   = 30           # ‡πÄ‡∏ä‡πá‡∏Ñ H1 ‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
M5_CHECK_INTERVAL_SEC   = 3            # ‡πÄ‡∏ä‡πá‡∏Ñ M5 ‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (#‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)

# ---- Telegram ----
TELEGRAM_TOKEN   = os.getenv('TELEGRAM_TOKEN', 'YOUR_TELEGRAM_TOKEN_HERE_FOR_LOCAL_TESTING')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', 'YOUR_CHAT_ID_HERE_FOR_LOCAL_TESTING')

# ================== logging ==================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler('bot.log', encoding='utf-8'), logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# ================== GLOBAL STATE ==================
# --- H1 intrabar signal latch ---
h1_latched_dir = None        # 'long' / 'short' ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ó‡πà‡∏á
h1_latch_bar_ts = None       # timestamp ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á H1 ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å
exchange = None
market_info = None

# ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ñ‡∏∑‡∏≠
position = None  # dict: {'side','entry','contracts','sl','step','opened_at'}

# ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì/‡πÅ‡∏ú‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
entry_plan = {
    'h1_dir': None,            # 'long'/'short' ‡∏à‡∏≤‡∏Å EMA10/50 H1
    'h1_bar_ts': None,         # ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á H1 ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    'stage': 'idle',           # 'idle' -> 'armed' -> 'wait_macd_cross'
    'm5_last_bar_ts': None,    # ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏ï‡πà‡∏≠‡πÅ‡∏ó‡πà‡∏á M5
    'm5_touch_ts': None,       # ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ó‡πà‡∏á M5 ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏∞/‡πÄ‡∏•‡∏¢ EMA200
    'macd_initial': None       # 'buy-<', 'sell->' (‡πÄ‡∏£‡∏¥‡πà‡∏° DIF<DEA ‡∏´‡∏£‡∏∑‡∏≠ DIF>DEA)
}

last_h1_check  = 0.0
last_m5_check  = 0.0
last_manual_tp_alert_ts = 0.0

# ================== Telegram ==================
def send_telegram(msg: str):
    if (not TELEGRAM_TOKEN or TELEGRAM_TOKEN.startswith('YOUR_') or
        not TELEGRAM_CHAT_ID or TELEGRAM_CHAT_ID.startswith('YOUR_')):
        logger.warning("‚ö† TELEGRAM creds not set; skip send.")
        return
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        params = {'chat_id': TELEGRAM_CHAT_ID, 'text': msg, 'parse_mode': 'HTML'}
        requests.get(url, params=params, timeout=10).raise_for_status()
    except Exception as e:
        logger.error(f"Telegram error: {e}")

def fmt_usd(x): 
    try: return f"{float(x):,.2f}"
    except: return str(x)

# ================== Exchange ==================
def setup_exchange():
    global exchange, market_info
    if not API_KEY or not SECRET or 'YOUR_' in API_KEY or 'YOUR_' in SECRET:
        send_telegram("‚õî Critical: API key/secret not set.")
        sys.exit(1)
    exchange = ccxt.binance({
        'apiKey': API_KEY,
        'secret': SECRET,
        'enableRateLimit': True,
        'options': {'defaultType': 'future', 'marginMode': 'cross'},
        'timeout': 60000
    })
    exchange.load_markets()
    market_info = exchange.market(SYMBOL)
    try:
        exchange.set_leverage(LEVERAGE, SYMBOL)
    except Exception as e:
        logger.error(f"set_leverage failed: {e}")
        send_telegram(f"‚õî set_leverage failed: {e}")

def decimal_price(v: float) -> float:
    if not market_info: return round(v, 2)
    return float(exchange.price_to_precision(SYMBOL, v))

# ================== Indicators ==================
def ema_series(values, period):
    if len(values) < period: return None
    k = 2/(period+1)
    e = values[0]
    out = [e]
    for v in values[1:]:
        e = v*k + e*(1-k)
        out.append(e)
    return out

def last_ema(values, period):
    es = ema_series(values, period)
    return es[-1] if es else None

def macd_from_closes(closes):
    if len(closes) < MACD_SLOW + MACD_SIGNAL + 2: return None
    ef = ema_series(closes, MACD_FAST)
    es = ema_series(closes, MACD_SLOW)
    if not ef or not es: return None
    start = len(ef) - len(es)
    dif = [ef[start+i] - es[i] for i in range(len(es))]
    dea = ema_series(dif, MACD_SIGNAL)
    if not dea or len(dea) < 2 or len(dif) < 2: return None
    return dif[-2], dif[-1], dea[-2], dea[-1]  # prev, now

def macd_cross_up(dif_prev, dif_now, dea_prev, dea_now):
    return (dif_prev <= dea_prev) and (dif_now > dea_now)

def macd_cross_down(dif_prev, dif_now, dea_prev, dea_now):
    return (dif_prev >= dea_prev) and (dif_now < dea_now)

def find_recent_swing_low_high_m5(ohlcv_m5, lookback=SWING_LOOKBACK_M5, k=2):
    """‡∏´‡∏≤ swing ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á lookback (pivot ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ)"""
    if len(ohlcv_m5) < lookback + 2*k + 1:
        look = ohlcv_m5[:]
    else:
        look = ohlcv_m5[-lookback:]
    highs = [c[2] for c in look]
    lows  = [c[3] for c in look]

    swing_low = None
    swing_high = None
    for i in range(k, len(look)-k):
        if all(lows[i]  <= lows[i-j]  for j in range(1,k+1)) and all(lows[i]  <= lows[i+j]  for j in range(1,k+1)):
            swing_low = look[i][3]
        if all(highs[i] >= highs[i-j] for j in range(1,k+1)) and all(highs[i] >= highs[i+j] for j in range(1,k+1)):
            swing_high = look[i][2]
    if swing_low  is None: swing_low  = min(lows)
    if swing_high is None: swing_high = max(highs)
    return swing_low, swing_high

# ================== Orders / SL ==================
def cancel_all_open_orders(max_retry=3):
    for _ in range(max_retry):
        try:
            orders = exchange.fetch_open_orders(SYMBOL)
            if not orders: return
            for o in orders:
                try:
                    exchange.cancel_order(o['id'], SYMBOL)
                    time.sleep(0.05)
                except Exception as e:
                    logger.warning(f"cancel warn: {e}")
        except Exception as e:
            logger.error(f"cancel_all_open_orders error: {e}")
            time.sleep(0.2)

def set_sl_close_position(side: str, stop_price: float):
    """‡∏ï‡∏±‡πâ‡∏á SL ‡πÅ‡∏ö‡∏ö‡∏ú‡∏π‡∏Å‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô (closePosition=True) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î"""
    try:
        sp = decimal_price(stop_price)
        params = {'stopPrice': sp, 'reduceOnly': True, 'closePosition': True}
        order_side = 'sell' if side == 'long' else 'buy'
        exchange.create_order(SYMBOL, 'STOP_MARKET', order_side, None, None, params)
        send_telegram(
            "‚úÖ ‡∏ï‡∏±‡πâ‡∏á SL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n"
            f"üìä Direction: <b>{side.upper()}</b>\n"
            f"üõ° SL: <code>{fmt_usd(sp)}</code>"
        )
        return True
    except Exception as e:
        logger.error(f"set_sl_close_position error: {e}")
        send_telegram(f"‚ùå SL Error: {e}")
        return False

def open_market(side: str, price_now: float):
    """‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á SL ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å swing ‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡πÉ‡∏´‡∏°‡πà"""
    global position
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ (notional 80% ‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ß‡πà‡∏≤‡∏á * leverage)
    bal = get_free_usdt()
    notional = max(0.0, bal) * 0.8 * LEVERAGE
    if notional <= 0:
        send_telegram("‚õî ‡πÑ‡∏°‡πà‡∏û‡∏≠ margin ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå")
        return False
    amount = float(exchange.amount_to_precision(SYMBOL, notional / price_now))
    side_ccxt = 'buy' if side == 'long' else 'sell'
    try:
        exchange.create_market_order(SYMBOL, side_ccxt, amount)
        # ‡∏î‡∏∂‡∏á entry ‡∏à‡∏£‡∏¥‡∏á
        time.sleep(1)
        pos = fetch_position()
        if not pos or pos.get('side') != side:
            send_telegram("‚õî ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return False
        position = {
            'side': side,
            'entry': float(pos['entry']),
            'contracts': float(pos['contracts']),
            'sl': None,
            'step': 0,
            'opened_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        send_telegram(
            "üéØ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô <b>{}</b>\n"
            "üì¶ Size: <code>{:.6f}</code>\n"
            "üéØ Entry: <code>{}</code>".format(side.upper(), position['contracts'], fmt_usd(position['entry']))
        )
        # ‡∏ï‡∏±‡πâ‡∏á SL ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å swing M5
        ohlcv_m5 = exchange.fetch_ohlcv(SYMBOL, timeframe=TIMEFRAME_M5, limit=max(SWING_LOOKBACK_M5, 60))
        swing_low, swing_high = find_recent_swing_low_high_m5(ohlcv_m5)
        if side == 'long':
            sl0 = swing_low - SL_EXTRA_POINTS
        else:
            sl0 = swing_high + SL_EXTRA_POINTS
        if set_sl_close_position(side, sl0):
            position['sl'] = float(sl0)
        return True
    except Exception as e:
        logger.error(f"open_market error: {e}")
        send_telegram(f"‚ùå Open order error: {e}")
        return False

def tighten_sl_for_new_signal(side: str, price_now: float):
    """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì H1 ‡πÉ‡∏´‡∏°‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡∏∑‡∏≠‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô"""
    if NEW_SIGNAL_ACTION == 'close_now':
        try:
            close_side = 'sell' if side == 'long' else 'buy'
            exchange.create_market_order(SYMBOL, close_side, position['contracts'])
            send_telegram("‚ùóÔ∏è‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡∏°‡πà ‚Üí <b>‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ</b>")
            return True
        except Exception as e:
            logger.error(f"close_now error: {e}")
            send_telegram(f"‚ùå close_now error: {e}")
            return False
    else:
        new_sl = (price_now - NEW_SIGNAL_SL_OFFSET) if side=='long' else (price_now + NEW_SIGNAL_SL_OFFSET)
        ok = set_sl_close_position(side, new_sl)
        if ok:
            send_telegram("ü¶† ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡∏°‡πà ‚Üí <b>‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö SL ‡πÉ‡∏Å‡∏•‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤</b> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß")
        return ok

# ================== Fetch Helpers ==================
def get_free_usdt():
    try:
        bal = exchange.fetch_balance()
        if 'USDT' in bal and 'free' in bal['USDT']:
            return float(bal['USDT']['free'])
        assets = bal.get('info', {}).get('assets', [])
        for a in assets:
            if a.get('asset') == 'USDT':
                return float(a.get('availableBalance', 0.0))
    except Exception as e:
        logger.error(f"get_free_usdt error: {e}")
    return 0.0

def fetch_position():
    """‡∏≠‡πà‡∏≤‡∏ô‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠"""
    try:
        ps = exchange.fetch_positions([SYMBOL])
        for p in ps:
            if p.get('symbol') == SYMBOL and float(p.get('contracts', 0) or 0) != 0:
                return {'side': p.get('side'),
                        'contracts': abs(float(p.get('contracts', 0))),
                        'entry': float(p.get('entryPrice', 0) or 0)}
        return None
    except Exception as e:
        logger.error(f"fetch_position error: {e}")
        return None

# ================== Core Logic ==================

def get_h1_signal_latched() -> tuple[str|None, int|None]:
    """
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤: ('long'/'short'/None, bar_ts)
    - ‡∏ñ‡πâ‡∏≤ WAIT_H1_CLOSE=True: ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏¥‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö check_h1_trend ‡πÄ‡∏î‡∏¥‡∏°)
    - ‡∏ñ‡πâ‡∏≤ WAIT_H1_CLOSE=False: ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (intrabar) ‡πÅ‡∏ï‡πà "‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÅ‡∏£‡∏Å" ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
    """
    global h1_latched_dir, h1_latch_bar_ts

    limit = max(EMA_SLOW_H1 + 5, 60)
    o = exchange.fetch_ohlcv(SYMBOL, timeframe=TIMEFRAME_H1, limit=limit)
    if not o or len(o) < 3:
        return None, None

    if WAIT_H1_CLOSE:
        # ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏¥‡∏î (o[-2]) ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
        closes = [c[4] for c in o[:-1]]
        ts = o[-2][0]
        ema_fast = last_ema(closes, EMA_FAST_H1)
        ema_slow = last_ema(closes, EMA_SLOW_H1)
        if ema_fast is None or ema_slow is None:
            return None, ts
        if ema_fast > ema_slow:  return 'long', ts
        if ema_fast < ema_slow:  return 'short', ts
        return None, ts
    else:
        # ‡πÉ‡∏ä‡πâ intrabar + latch
        closes = [c[4] for c in o]     # ‡∏£‡∏ß‡∏°‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        ts_current = o[-1][0]          # timestamp ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á H1 ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏ó‡πà‡∏á ‚Üí ‡∏•‡πâ‡∏≤‡∏á latch
        if h1_latch_bar_ts != ts_current:
            h1_latched_dir = None
            h1_latch_bar_ts = ts_current

        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ latch ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏™‡πà‡∏á‡∏ó‡∏¥‡∏®‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏¢
        if h1_latched_dir is not None:
            return h1_latched_dir, ts_current

        # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ latch ‚Üí ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡πâ‡∏ß "‡∏•‡πá‡∏≠‡∏Å" ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ó‡∏¥‡∏®
        ema_fast = last_ema(closes, EMA_FAST_H1)
        ema_slow = last_ema(closes, EMA_SLOW_H1)
        if ema_fast is None or ema_slow is None:
            return None, ts_current

        if ema_fast > ema_slow:
            h1_latched_dir = 'long'
            return 'long', ts_current
        elif ema_fast < ema_slow:
            h1_latched_dir = 'short'
            return 'short', ts_current
        else:
            return None, ts_current
            
def check_m5_env():
    """‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• M5 ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö logic ‡πÄ‡∏Ç‡πâ‡∏≤ (‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏¥‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)"""
    limit = max(EMA200_M5 + 10, 240)
    o = exchange.fetch_ohlcv(SYMBOL, timeframe=TIMEFRAME_M5, limit=limit)
    if not o or len(o) < EMA200_M5 + 5: return None
    ts = o[-2][0]               # ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏¥‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    closes = [c[4] for c in o[:-1]]
    highs  = [c[2] for c in o[:-1]]
    lows   = [c[3] for c in o[:-1]]
    close_now = closes[-1]
    ema200 = last_ema(closes, EMA200_M5)
    macd = macd_from_closes(closes)
    return {'ts': ts, 'close': close_now, 'high': highs[-1], 'low': lows[-1], 'ema200': ema200, 'macd': macd}

def handle_entry_logic(price_now: float):
    """‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô ‚Üí ‡πÉ‡∏ä‡πâ logic ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    global entry_plan, last_h1_check

    # 1) ‡∏≠‡πà‡∏≤‡∏ô H1 ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏´‡∏•‡∏±‡∏Å (intrabar ‡∏ï‡∏≤‡∏° WAIT_H1_CLOSE)
    tnow = time.time()
    if tnow - last_h1_check >= H1_CHECK_INTERVAL_SEC or (entry_plan['h1_dir'] is None):
        h1_dir, h1_ts = get_h1_signal_latched()
        last_h1_check = tnow
        if h1_dir:
            if (entry_plan['h1_dir'] != h1_dir) or (entry_plan['h1_bar_ts'] != h1_ts):
                entry_plan = {
                    'h1_dir': h1_dir, 'h1_bar_ts': h1_ts,
                    'stage': 'armed', 'm5_last_bar_ts': None,
                    'm5_touch_ts': None, 'macd_initial': None
                }
                send_telegram(f"ü•á H1 ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡∏°‡πà: <b>{h1_dir.upper()}</b> (EMA{EMA_FAST_H1}/{EMA_SLOW_H1})\n‡∏£‡∏≠‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç M5 ‡πÅ‡∏ï‡∏∞ EMA200 + MACD")

    if entry_plan['stage'] == 'idle' or entry_plan['h1_dir'] is None:
        return

    # 2) ‡∏≠‡πà‡∏≤‡∏ô M5 ‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏¥‡∏î)
    env = check_m5_env()
    if not env or env['ema200'] is None or env['macd'] is None:
        return
    m5_ts   = env['ts']
    close   = env['close']
    high    = env['high']
    low     = env['low']
    ema200  = env['ema200']
    dif_p, dif_n, dea_p, dea_n = env['macd']

    # ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
    if entry_plan['m5_last_bar_ts'] == m5_ts:
        return
    entry_plan['m5_last_bar_ts'] = m5_ts

    want = entry_plan['h1_dir']

    # 2A) ‡∏£‡∏∞‡∏¢‡∏∞ "‡πÅ‡∏ï‡∏∞/‡πÄ‡∏•‡∏¢ EMA200" + MACD initial direction
    if entry_plan['stage'] == 'armed':
        if want == 'long':
            touched = (low <= ema200)             # ‡πÅ‡∏ï‡∏∞/‡πÄ‡∏•‡∏¢‡∏•‡∏á
            macd_initial_ok = (dif_n < dea_n)     # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å DIF < DEA
            if touched and macd_initial_ok:
                entry_plan['stage'] = 'wait_macd_cross'
                entry_plan['m5_touch_ts'] = m5_ts
                entry_plan['macd_initial'] = 'buy-<'
                send_telegram("‚è≥M5 ‡πÅ‡∏ï‡∏∞/‡πÄ‡∏•‡∏¢ EMA200 ‡∏•‡∏á ‚Üí ‡∏£‡∏≠ DIF ‡∏ï‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ <b>LONG</b>")
        else:
            touched = (high >= ema200)            # ‡πÅ‡∏ï‡∏∞/‡πÄ‡∏•‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
            macd_initial_ok = (dif_n > dea_n)     # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å DIF > DEA
            if touched and macd_initial_ok:
                entry_plan['stage'] = 'wait_macd_cross'
                entry_plan['m5_touch_ts'] = m5_ts
                entry_plan['macd_initial'] = 'sell->'
                send_telegram("‚è≥ M5 ‡πÅ‡∏ï‡∏∞/‡πÄ‡∏•‡∏¢ EMA200 ‡∏Ç‡∏∂‡πâ‡∏ô ‚Üí ‡∏£‡∏≠ DIF ‡∏ï‡∏±‡∏î‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ <b>SHORT</b>")

    # 2B) ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏≠ MACD cross ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡πÅ‡∏•‡∏∞ "‡∏¢‡πâ‡∏≥" ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì H1 ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤
    elif entry_plan['stage'] == 'wait_macd_cross':
        h1_dir_now, h1_ts_now = get_h1_signal_latched()
        if (h1_dir_now is None) or (h1_dir_now != want):
            send_telegram("üöß EMA H1 ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì ‚Üí ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏ú‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡∏°‡πà")
            entry_plan = {'h1_dir': h1_dir_now, 'h1_bar_ts': h1_ts_now,
                          'stage':'armed' if h1_dir_now else 'idle',
                          'm5_last_bar_ts': None, 'm5_touch_ts': None, 'macd_initial': None}
            return

        crossed = macd_cross_up(dif_p, dif_n, dea_p, dea_n) if want=='long' else macd_cross_down(dif_p, dif_n, dea_p, dea_n)
        if crossed:
            ok = open_market(want, price_now)
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏ú‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏¢‡∏¥‡∏á‡∏ã‡πâ‡∏≥
            entry_plan['stage'] = 'idle'
            entry_plan['m5_touch_ts'] = None
            entry_plan['macd_initial'] = None
            if not ok:
                send_telegram("‚õî ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

def monitor_position_and_trailing(price_now: float):
    """‡∏î‡∏π‡πÅ‡∏• SL step ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì H1 ‡πÉ‡∏´‡∏°‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡∏∑‡∏≠‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô"""
    global position, last_manual_tp_alert_ts, entry_plan

    # ‡∏≠‡πà‡∏≤‡∏ô‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á
    pos_real = fetch_position()
    if not pos_real:
        # ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡πâ‡∏≤‡∏á + ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state entry ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
        cancel_all_open_orders(max_retry=3)
        if position:
            pnl_pts = (price_now - position['entry']) if position['side']=='long' else (position['entry'] - price_now)
            send_telegram(
                "üìä ‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô <b>{}</b>\n"
                "Entry: <code>{}</code> ‚Üí Last: <code>{}</code>\n"
                "PnL: <b>{:+.2f} pts</b>\n"
                "üßπ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß\n"
                "üîé ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡∏°‡πà"
                .format(position['side'].upper(), fmt_usd(position['entry']), fmt_usd(price_now), pnl_pts)
            )
        position = None
        # reset ‡∏ó‡∏±‡πâ‡∏á entry_plan ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó‡πÉ‡∏´‡∏°‡πà
        entry_plan = {'h1_dir': None, 'h1_bar_ts': None, 'stage':'idle',
                      'm5_last_bar_ts': None, 'm5_touch_ts': None, 'macd_initial': None}
        return

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï entry/size
    if position:
        position['contracts'] = float(pos_real['contracts'])
        position['entry']     = float(pos_real['entry'])

    # 1) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì H1 ‡πÉ‡∏´‡∏°‡πà "‡∏™‡∏ß‡∏ô‡∏ù‡∏±‡πà‡∏á" ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡∏∑‡∏≠
    h1_dir_now, _ = check_h1_trend()
    if position and h1_dir_now and ((h1_dir_now == 'long' and position['side']=='short') or
                                    (h1_dir_now == 'short' and position['side']=='long')):
        ok = tighten_sl_for_new_signal(position['side'], price_now)
        if ok:
            send_telegram("‚ö†Ô∏è‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡∏°‡πà ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ/‡∏ï‡∏±‡πâ‡∏á SL")

    # 2) Trailing 3 ‡∏Ç‡∏±‡πâ‡∏ô
    if not position: return
    side  = position['side']
    entry = position['entry']
    pnl_pts = (price_now - entry) if side=='long' else (entry - price_now)

    # Step 1
    if position['step'] < 1 and pnl_pts >= STEP1_TRIGGER:
        new_sl = (entry + STEP1_SL_OFFSET) if side=='long' else (entry - STEP1_SL_OFFSET)
        if set_sl_close_position(side, new_sl):
            position['sl'] = new_sl
            position['step'] = 1
            send_telegram("üö¶ Step1 ‚Üí ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô SL ‡∏°‡∏≤ <code>{}</code>".format(fmt_usd(new_sl)))

    # Step 2
    elif position['step'] < 2 and pnl_pts >= STEP2_TRIGGER:
        new_sl = (entry + STEP2_SL_OFFSET) if side=='long' else (entry - STEP2_SL_OFFSET)
        if set_sl_close_position(side, new_sl):
            position['sl'] = new_sl
            position['step'] = 2
            send_telegram("üö¶ Step2 ‚Üí SL = <code>{}</code>  üöÄ<b>TP</b>".format(fmt_usd(new_sl)))

    # Step 3
    elif position['step'] < 3 and pnl_pts >= STEP3_TRIGGER:
        new_sl = (entry + STEP3_SL_OFFSET) if side=='long' else (entry - STEP3_SL_OFFSET)
        if set_sl_close_position(side, new_sl):
            position['sl'] = new_sl
            position['step'] = 3
            send_telegram("üí∂ Step3 ‚Üí SL = <code>{}</code>  üéØ<b>TP</b>".format(fmt_usd(new_sl)))

    # 3) Manual close alert > 1300 pts
    if pnl_pts >= MANUAL_CLOSE_ALERT_TRIGGER:
        now = time.time()
        if now - last_manual_tp_alert_ts >= 30:  # ‡∏Å‡∏±‡∏ô‡∏™‡πÅ‡∏õ‡∏°
            last_manual_tp_alert_ts = now
            send_telegram(
                "üö®‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏∞‡∏•‡∏∏‡πÄ‡∏õ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß <b>{:.0f} pts</b>\n"
                "‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ <b>‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô</b> ".format(MANUAL_CLOSE_ALERT_TRIGGER)
            )

# ================== Startup Banner ==================
def send_startup_banner():
    try:
        bal = get_free_usdt()
        send_telegram(
            "ü§ñ ‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô üí∞\n"
            f"üíµ ‡∏¢‡∏≠‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {fmt_usd(bal)} USDT\n"
            f"üìä H1 EMA: {EMA_FAST_H1}/{EMA_SLOW_H1}\n"
            #| ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏±‡∏ô‡∏ó‡∏µ: {('‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πà‡∏á' if not WAIT_H1_CLOSE else '‡∏£‡∏≠‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πà‡∏á')}\n"
            f"üß† M5 EMA200: {EMA200_M5} | MACD: {MACD_FAST}/{MACD_SLOW}/{MACD_SIGNAL}\n"
            f"üõ° SL ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å Swing{SWING_LOOKBACK_M5} ‡πÅ‡∏ó‡πà‡∏á ¬±{int(SL_EXTRA_POINTS)} pts\n"
            f"üö¶ Step1: +{int(STEP1_TRIGGER)} ‚Üí SL {int(STEP1_SL_OFFSET)} pts\n"
            f"üö¶ Step2: +{int(STEP2_TRIGGER)} ‚Üí SL +{int(STEP2_SL_OFFSET)} pts (TP)\n"
            f"üéØ Step3: +{int(STEP3_TRIGGER)} ‚Üí SL +{int(STEP3_SL_OFFSET)} pts (TP)\n"
            f"üåà Manual alert > +{int(MANUAL_CLOSE_ALERT_TRIGGER)} pts\n"
            f"‚ö†Ô∏è New H1 signal: {NEW_SIGNAL_ACTION} (¬±{int(NEW_SIGNAL_SL_OFFSET)} pts)"
        )
    except Exception as e:
        logger.error(f"banner error: {e}")

# ================== main ==================
def main():
    setup_exchange()
    send_startup_banner()
    while True:
        try:
            price_now = exchange.fetch_ticker(SYMBOL)['last']

            if position:
                monitor_position_and_trailing(price_now)
            else:
                handle_entry_logic(price_now)

            time.sleep(FAST_LOOP_SECONDS)
        except KeyboardInterrupt:
            break
        except Exception as e:
            logger.error(f"main loop error: {e}")
            time.sleep(2)

if __name__ == "__main__":
    main()
